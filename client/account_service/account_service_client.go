// Code generated by go-swagger; DO NOT EDIT.

package account_service

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new account service API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for account service API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption is the option for Client methods
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	AccountServiceCanI(params *AccountServiceCanIParams, opts ...ClientOption) (*AccountServiceCanIOK, error)

	AccountServiceCreateToken(params *AccountServiceCreateTokenParams, opts ...ClientOption) (*AccountServiceCreateTokenOK, error)

	AccountServiceDeleteToken(params *AccountServiceDeleteTokenParams, opts ...ClientOption) (*AccountServiceDeleteTokenOK, error)

	AccountServiceGetAccount(params *AccountServiceGetAccountParams, opts ...ClientOption) (*AccountServiceGetAccountOK, error)

	AccountServiceListAccounts(params *AccountServiceListAccountsParams, opts ...ClientOption) (*AccountServiceListAccountsOK, error)

	AccountServiceUpdatePassword(params *AccountServiceUpdatePasswordParams, opts ...ClientOption) (*AccountServiceUpdatePasswordOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
  AccountServiceCanI cans i checks if the current account has permission to perform an action
*/
func (a *Client) AccountServiceCanI(params *AccountServiceCanIParams, opts ...ClientOption) (*AccountServiceCanIOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAccountServiceCanIParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "AccountService_CanI",
		Method:             "GET",
		PathPattern:        "/api/v1/account/can-i/{resource}/{action}/{subresource}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &AccountServiceCanIReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*AccountServiceCanIOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*AccountServiceCanIDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  AccountServiceCreateToken creates token creates a token
*/
func (a *Client) AccountServiceCreateToken(params *AccountServiceCreateTokenParams, opts ...ClientOption) (*AccountServiceCreateTokenOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAccountServiceCreateTokenParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "AccountService_CreateToken",
		Method:             "POST",
		PathPattern:        "/api/v1/account/{name}/token",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &AccountServiceCreateTokenReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*AccountServiceCreateTokenOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*AccountServiceCreateTokenDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  AccountServiceDeleteToken deletes token deletes a token
*/
func (a *Client) AccountServiceDeleteToken(params *AccountServiceDeleteTokenParams, opts ...ClientOption) (*AccountServiceDeleteTokenOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAccountServiceDeleteTokenParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "AccountService_DeleteToken",
		Method:             "DELETE",
		PathPattern:        "/api/v1/account/{name}/token/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &AccountServiceDeleteTokenReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*AccountServiceDeleteTokenOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*AccountServiceDeleteTokenDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  AccountServiceGetAccount gets account returns an account
*/
func (a *Client) AccountServiceGetAccount(params *AccountServiceGetAccountParams, opts ...ClientOption) (*AccountServiceGetAccountOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAccountServiceGetAccountParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "AccountService_GetAccount",
		Method:             "GET",
		PathPattern:        "/api/v1/account/{name}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &AccountServiceGetAccountReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*AccountServiceGetAccountOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*AccountServiceGetAccountDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  AccountServiceListAccounts lists accounts returns the list of accounts
*/
func (a *Client) AccountServiceListAccounts(params *AccountServiceListAccountsParams, opts ...ClientOption) (*AccountServiceListAccountsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAccountServiceListAccountsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "AccountService_ListAccounts",
		Method:             "GET",
		PathPattern:        "/api/v1/account",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &AccountServiceListAccountsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*AccountServiceListAccountsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*AccountServiceListAccountsDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  AccountServiceUpdatePassword updates password updates an account s password to a new value
*/
func (a *Client) AccountServiceUpdatePassword(params *AccountServiceUpdatePasswordParams, opts ...ClientOption) (*AccountServiceUpdatePasswordOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAccountServiceUpdatePasswordParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "AccountService_UpdatePassword",
		Method:             "PUT",
		PathPattern:        "/api/v1/account/password",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &AccountServiceUpdatePasswordReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*AccountServiceUpdatePasswordOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*AccountServiceUpdatePasswordDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
