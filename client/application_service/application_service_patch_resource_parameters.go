// Code generated by go-swagger; DO NOT EDIT.

package application_service

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
)

// NewApplicationServicePatchResourceParams creates a new ApplicationServicePatchResourceParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewApplicationServicePatchResourceParams() *ApplicationServicePatchResourceParams {
	return &ApplicationServicePatchResourceParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewApplicationServicePatchResourceParamsWithTimeout creates a new ApplicationServicePatchResourceParams object
// with the ability to set a timeout on a request.
func NewApplicationServicePatchResourceParamsWithTimeout(timeout time.Duration) *ApplicationServicePatchResourceParams {
	return &ApplicationServicePatchResourceParams{
		timeout: timeout,
	}
}

// NewApplicationServicePatchResourceParamsWithContext creates a new ApplicationServicePatchResourceParams object
// with the ability to set a context for a request.
func NewApplicationServicePatchResourceParamsWithContext(ctx context.Context) *ApplicationServicePatchResourceParams {
	return &ApplicationServicePatchResourceParams{
		Context: ctx,
	}
}

// NewApplicationServicePatchResourceParamsWithHTTPClient creates a new ApplicationServicePatchResourceParams object
// with the ability to set a custom HTTPClient for a request.
func NewApplicationServicePatchResourceParamsWithHTTPClient(client *http.Client) *ApplicationServicePatchResourceParams {
	return &ApplicationServicePatchResourceParams{
		HTTPClient: client,
	}
}

/* ApplicationServicePatchResourceParams contains all the parameters to send to the API endpoint
   for the application service patch resource operation.

   Typically these are written to a http.Request.
*/
type ApplicationServicePatchResourceParams struct {

	// Body.
	Body string

	// Group.
	Group *string

	// Kind.
	Kind *string

	// Name.
	Name string

	// Namespace.
	Namespace *string

	// PatchType.
	PatchType *string

	// ResourceName.
	ResourceName *string

	// Version.
	Version *string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the application service patch resource params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *ApplicationServicePatchResourceParams) WithDefaults() *ApplicationServicePatchResourceParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the application service patch resource params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *ApplicationServicePatchResourceParams) SetDefaults() {
	// no default values defined for this parameter
}

// WithTimeout adds the timeout to the application service patch resource params
func (o *ApplicationServicePatchResourceParams) WithTimeout(timeout time.Duration) *ApplicationServicePatchResourceParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the application service patch resource params
func (o *ApplicationServicePatchResourceParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the application service patch resource params
func (o *ApplicationServicePatchResourceParams) WithContext(ctx context.Context) *ApplicationServicePatchResourceParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the application service patch resource params
func (o *ApplicationServicePatchResourceParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the application service patch resource params
func (o *ApplicationServicePatchResourceParams) WithHTTPClient(client *http.Client) *ApplicationServicePatchResourceParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the application service patch resource params
func (o *ApplicationServicePatchResourceParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithBody adds the body to the application service patch resource params
func (o *ApplicationServicePatchResourceParams) WithBody(body string) *ApplicationServicePatchResourceParams {
	o.SetBody(body)
	return o
}

// SetBody adds the body to the application service patch resource params
func (o *ApplicationServicePatchResourceParams) SetBody(body string) {
	o.Body = body
}

// WithGroup adds the group to the application service patch resource params
func (o *ApplicationServicePatchResourceParams) WithGroup(group *string) *ApplicationServicePatchResourceParams {
	o.SetGroup(group)
	return o
}

// SetGroup adds the group to the application service patch resource params
func (o *ApplicationServicePatchResourceParams) SetGroup(group *string) {
	o.Group = group
}

// WithKind adds the kind to the application service patch resource params
func (o *ApplicationServicePatchResourceParams) WithKind(kind *string) *ApplicationServicePatchResourceParams {
	o.SetKind(kind)
	return o
}

// SetKind adds the kind to the application service patch resource params
func (o *ApplicationServicePatchResourceParams) SetKind(kind *string) {
	o.Kind = kind
}

// WithName adds the name to the application service patch resource params
func (o *ApplicationServicePatchResourceParams) WithName(name string) *ApplicationServicePatchResourceParams {
	o.SetName(name)
	return o
}

// SetName adds the name to the application service patch resource params
func (o *ApplicationServicePatchResourceParams) SetName(name string) {
	o.Name = name
}

// WithNamespace adds the namespace to the application service patch resource params
func (o *ApplicationServicePatchResourceParams) WithNamespace(namespace *string) *ApplicationServicePatchResourceParams {
	o.SetNamespace(namespace)
	return o
}

// SetNamespace adds the namespace to the application service patch resource params
func (o *ApplicationServicePatchResourceParams) SetNamespace(namespace *string) {
	o.Namespace = namespace
}

// WithPatchType adds the patchType to the application service patch resource params
func (o *ApplicationServicePatchResourceParams) WithPatchType(patchType *string) *ApplicationServicePatchResourceParams {
	o.SetPatchType(patchType)
	return o
}

// SetPatchType adds the patchType to the application service patch resource params
func (o *ApplicationServicePatchResourceParams) SetPatchType(patchType *string) {
	o.PatchType = patchType
}

// WithResourceName adds the resourceName to the application service patch resource params
func (o *ApplicationServicePatchResourceParams) WithResourceName(resourceName *string) *ApplicationServicePatchResourceParams {
	o.SetResourceName(resourceName)
	return o
}

// SetResourceName adds the resourceName to the application service patch resource params
func (o *ApplicationServicePatchResourceParams) SetResourceName(resourceName *string) {
	o.ResourceName = resourceName
}

// WithVersion adds the version to the application service patch resource params
func (o *ApplicationServicePatchResourceParams) WithVersion(version *string) *ApplicationServicePatchResourceParams {
	o.SetVersion(version)
	return o
}

// SetVersion adds the version to the application service patch resource params
func (o *ApplicationServicePatchResourceParams) SetVersion(version *string) {
	o.Version = version
}

// WriteToRequest writes these params to a swagger request
func (o *ApplicationServicePatchResourceParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error
	if err := r.SetBodyParam(o.Body); err != nil {
		return err
	}

	if o.Group != nil {

		// query param group
		var qrGroup string

		if o.Group != nil {
			qrGroup = *o.Group
		}
		qGroup := qrGroup
		if qGroup != "" {

			if err := r.SetQueryParam("group", qGroup); err != nil {
				return err
			}
		}
	}

	if o.Kind != nil {

		// query param kind
		var qrKind string

		if o.Kind != nil {
			qrKind = *o.Kind
		}
		qKind := qrKind
		if qKind != "" {

			if err := r.SetQueryParam("kind", qKind); err != nil {
				return err
			}
		}
	}

	// path param name
	if err := r.SetPathParam("name", o.Name); err != nil {
		return err
	}

	if o.Namespace != nil {

		// query param namespace
		var qrNamespace string

		if o.Namespace != nil {
			qrNamespace = *o.Namespace
		}
		qNamespace := qrNamespace
		if qNamespace != "" {

			if err := r.SetQueryParam("namespace", qNamespace); err != nil {
				return err
			}
		}
	}

	if o.PatchType != nil {

		// query param patchType
		var qrPatchType string

		if o.PatchType != nil {
			qrPatchType = *o.PatchType
		}
		qPatchType := qrPatchType
		if qPatchType != "" {

			if err := r.SetQueryParam("patchType", qPatchType); err != nil {
				return err
			}
		}
	}

	if o.ResourceName != nil {

		// query param resourceName
		var qrResourceName string

		if o.ResourceName != nil {
			qrResourceName = *o.ResourceName
		}
		qResourceName := qrResourceName
		if qResourceName != "" {

			if err := r.SetQueryParam("resourceName", qResourceName); err != nil {
				return err
			}
		}
	}

	if o.Version != nil {

		// query param version
		var qrVersion string

		if o.Version != nil {
			qrVersion = *o.Version
		}
		qVersion := qrVersion
		if qVersion != "" {

			if err := r.SetQueryParam("version", qVersion); err != nil {
				return err
			}
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
