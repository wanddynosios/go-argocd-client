// Code generated by go-swagger; DO NOT EDIT.

package application_service

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"fmt"
	"io"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"

	"github.com/wanddynosios/go-argocd-client/models"
)

// ApplicationServicePodLogs2Reader is a Reader for the ApplicationServicePodLogs2 structure.
type ApplicationServicePodLogs2Reader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *ApplicationServicePodLogs2Reader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewApplicationServicePodLogs2OK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	default:
		result := NewApplicationServicePodLogs2Default(response.Code())
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		if response.Code()/100 == 2 {
			return result, nil
		}
		return nil, result
	}
}

// NewApplicationServicePodLogs2OK creates a ApplicationServicePodLogs2OK with default headers values
func NewApplicationServicePodLogs2OK() *ApplicationServicePodLogs2OK {
	return &ApplicationServicePodLogs2OK{}
}

/* ApplicationServicePodLogs2OK describes a response with status code 200, with default header values.

A successful response.(streaming responses)
*/
type ApplicationServicePodLogs2OK struct {
	Payload *ApplicationServicePodLogs2OKBody
}

func (o *ApplicationServicePodLogs2OK) Error() string {
	return fmt.Sprintf("[GET /api/v1/applications/{name}/logs][%d] applicationServicePodLogs2OK  %+v", 200, o.Payload)
}
func (o *ApplicationServicePodLogs2OK) GetPayload() *ApplicationServicePodLogs2OKBody {
	return o.Payload
}

func (o *ApplicationServicePodLogs2OK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(ApplicationServicePodLogs2OKBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewApplicationServicePodLogs2Default creates a ApplicationServicePodLogs2Default with default headers values
func NewApplicationServicePodLogs2Default(code int) *ApplicationServicePodLogs2Default {
	return &ApplicationServicePodLogs2Default{
		_statusCode: code,
	}
}

/* ApplicationServicePodLogs2Default describes a response with status code -1, with default header values.

An unexpected error response.
*/
type ApplicationServicePodLogs2Default struct {
	_statusCode int

	Payload *models.RuntimeError
}

// Code gets the status code for the application service pod logs2 default response
func (o *ApplicationServicePodLogs2Default) Code() int {
	return o._statusCode
}

func (o *ApplicationServicePodLogs2Default) Error() string {
	return fmt.Sprintf("[GET /api/v1/applications/{name}/logs][%d] ApplicationService_PodLogs2 default  %+v", o._statusCode, o.Payload)
}
func (o *ApplicationServicePodLogs2Default) GetPayload() *models.RuntimeError {
	return o.Payload
}

func (o *ApplicationServicePodLogs2Default) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.RuntimeError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

/*ApplicationServicePodLogs2OKBody Stream result of applicationLogEntry
swagger:model ApplicationServicePodLogs2OKBody
*/
type ApplicationServicePodLogs2OKBody struct {

	// error
	Error *models.RuntimeStreamError `json:"error,omitempty"`

	// result
	Result *models.ApplicationLogEntry `json:"result,omitempty"`
}

// Validate validates this application service pod logs2 o k body
func (o *ApplicationServicePodLogs2OKBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateError(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateResult(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *ApplicationServicePodLogs2OKBody) validateError(formats strfmt.Registry) error {
	if swag.IsZero(o.Error) { // not required
		return nil
	}

	if o.Error != nil {
		if err := o.Error.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("applicationServicePodLogs2OK" + "." + "error")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("applicationServicePodLogs2OK" + "." + "error")
			}
			return err
		}
	}

	return nil
}

func (o *ApplicationServicePodLogs2OKBody) validateResult(formats strfmt.Registry) error {
	if swag.IsZero(o.Result) { // not required
		return nil
	}

	if o.Result != nil {
		if err := o.Result.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("applicationServicePodLogs2OK" + "." + "result")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("applicationServicePodLogs2OK" + "." + "result")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this application service pod logs2 o k body based on the context it is used
func (o *ApplicationServicePodLogs2OKBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateError(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateResult(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *ApplicationServicePodLogs2OKBody) contextValidateError(ctx context.Context, formats strfmt.Registry) error {

	if o.Error != nil {
		if err := o.Error.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("applicationServicePodLogs2OK" + "." + "error")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("applicationServicePodLogs2OK" + "." + "error")
			}
			return err
		}
	}

	return nil
}

func (o *ApplicationServicePodLogs2OKBody) contextValidateResult(ctx context.Context, formats strfmt.Registry) error {

	if o.Result != nil {
		if err := o.Result.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("applicationServicePodLogs2OK" + "." + "result")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("applicationServicePodLogs2OK" + "." + "result")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *ApplicationServicePodLogs2OKBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *ApplicationServicePodLogs2OKBody) UnmarshalBinary(b []byte) error {
	var res ApplicationServicePodLogs2OKBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
