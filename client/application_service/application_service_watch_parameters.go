// Code generated by go-swagger; DO NOT EDIT.

package application_service

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewApplicationServiceWatchParams creates a new ApplicationServiceWatchParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewApplicationServiceWatchParams() *ApplicationServiceWatchParams {
	return &ApplicationServiceWatchParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewApplicationServiceWatchParamsWithTimeout creates a new ApplicationServiceWatchParams object
// with the ability to set a timeout on a request.
func NewApplicationServiceWatchParamsWithTimeout(timeout time.Duration) *ApplicationServiceWatchParams {
	return &ApplicationServiceWatchParams{
		timeout: timeout,
	}
}

// NewApplicationServiceWatchParamsWithContext creates a new ApplicationServiceWatchParams object
// with the ability to set a context for a request.
func NewApplicationServiceWatchParamsWithContext(ctx context.Context) *ApplicationServiceWatchParams {
	return &ApplicationServiceWatchParams{
		Context: ctx,
	}
}

// NewApplicationServiceWatchParamsWithHTTPClient creates a new ApplicationServiceWatchParams object
// with the ability to set a custom HTTPClient for a request.
func NewApplicationServiceWatchParamsWithHTTPClient(client *http.Client) *ApplicationServiceWatchParams {
	return &ApplicationServiceWatchParams{
		HTTPClient: client,
	}
}

/* ApplicationServiceWatchParams contains all the parameters to send to the API endpoint
   for the application service watch operation.

   Typically these are written to a http.Request.
*/
type ApplicationServiceWatchParams struct {

	/* Name.

	   the application's name.
	*/
	Name *string

	/* Projects.

	   the project names to restrict returned list applications.
	*/
	Projects []string

	/* Refresh.

	   forces application reconciliation if set to true.
	*/
	Refresh *string

	/* Repo.

	   the repoURL to restrict returned list applications.
	*/
	Repo *string

	/* ResourceVersion.

	   when specified with a watch call, shows changes that occur after that particular version of a resource.
	*/
	ResourceVersion *string

	/* Selector.

	   the selector to restrict returned list to applications only with matched labels.
	*/
	Selector *string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the application service watch params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *ApplicationServiceWatchParams) WithDefaults() *ApplicationServiceWatchParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the application service watch params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *ApplicationServiceWatchParams) SetDefaults() {
	// no default values defined for this parameter
}

// WithTimeout adds the timeout to the application service watch params
func (o *ApplicationServiceWatchParams) WithTimeout(timeout time.Duration) *ApplicationServiceWatchParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the application service watch params
func (o *ApplicationServiceWatchParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the application service watch params
func (o *ApplicationServiceWatchParams) WithContext(ctx context.Context) *ApplicationServiceWatchParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the application service watch params
func (o *ApplicationServiceWatchParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the application service watch params
func (o *ApplicationServiceWatchParams) WithHTTPClient(client *http.Client) *ApplicationServiceWatchParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the application service watch params
func (o *ApplicationServiceWatchParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithName adds the name to the application service watch params
func (o *ApplicationServiceWatchParams) WithName(name *string) *ApplicationServiceWatchParams {
	o.SetName(name)
	return o
}

// SetName adds the name to the application service watch params
func (o *ApplicationServiceWatchParams) SetName(name *string) {
	o.Name = name
}

// WithProjects adds the projects to the application service watch params
func (o *ApplicationServiceWatchParams) WithProjects(projects []string) *ApplicationServiceWatchParams {
	o.SetProjects(projects)
	return o
}

// SetProjects adds the projects to the application service watch params
func (o *ApplicationServiceWatchParams) SetProjects(projects []string) {
	o.Projects = projects
}

// WithRefresh adds the refresh to the application service watch params
func (o *ApplicationServiceWatchParams) WithRefresh(refresh *string) *ApplicationServiceWatchParams {
	o.SetRefresh(refresh)
	return o
}

// SetRefresh adds the refresh to the application service watch params
func (o *ApplicationServiceWatchParams) SetRefresh(refresh *string) {
	o.Refresh = refresh
}

// WithRepo adds the repo to the application service watch params
func (o *ApplicationServiceWatchParams) WithRepo(repo *string) *ApplicationServiceWatchParams {
	o.SetRepo(repo)
	return o
}

// SetRepo adds the repo to the application service watch params
func (o *ApplicationServiceWatchParams) SetRepo(repo *string) {
	o.Repo = repo
}

// WithResourceVersion adds the resourceVersion to the application service watch params
func (o *ApplicationServiceWatchParams) WithResourceVersion(resourceVersion *string) *ApplicationServiceWatchParams {
	o.SetResourceVersion(resourceVersion)
	return o
}

// SetResourceVersion adds the resourceVersion to the application service watch params
func (o *ApplicationServiceWatchParams) SetResourceVersion(resourceVersion *string) {
	o.ResourceVersion = resourceVersion
}

// WithSelector adds the selector to the application service watch params
func (o *ApplicationServiceWatchParams) WithSelector(selector *string) *ApplicationServiceWatchParams {
	o.SetSelector(selector)
	return o
}

// SetSelector adds the selector to the application service watch params
func (o *ApplicationServiceWatchParams) SetSelector(selector *string) {
	o.Selector = selector
}

// WriteToRequest writes these params to a swagger request
func (o *ApplicationServiceWatchParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.Name != nil {

		// query param name
		var qrName string

		if o.Name != nil {
			qrName = *o.Name
		}
		qName := qrName
		if qName != "" {

			if err := r.SetQueryParam("name", qName); err != nil {
				return err
			}
		}
	}

	if o.Projects != nil {

		// binding items for projects
		joinedProjects := o.bindParamProjects(reg)

		// query array param projects
		if err := r.SetQueryParam("projects", joinedProjects...); err != nil {
			return err
		}
	}

	if o.Refresh != nil {

		// query param refresh
		var qrRefresh string

		if o.Refresh != nil {
			qrRefresh = *o.Refresh
		}
		qRefresh := qrRefresh
		if qRefresh != "" {

			if err := r.SetQueryParam("refresh", qRefresh); err != nil {
				return err
			}
		}
	}

	if o.Repo != nil {

		// query param repo
		var qrRepo string

		if o.Repo != nil {
			qrRepo = *o.Repo
		}
		qRepo := qrRepo
		if qRepo != "" {

			if err := r.SetQueryParam("repo", qRepo); err != nil {
				return err
			}
		}
	}

	if o.ResourceVersion != nil {

		// query param resourceVersion
		var qrResourceVersion string

		if o.ResourceVersion != nil {
			qrResourceVersion = *o.ResourceVersion
		}
		qResourceVersion := qrResourceVersion
		if qResourceVersion != "" {

			if err := r.SetQueryParam("resourceVersion", qResourceVersion); err != nil {
				return err
			}
		}
	}

	if o.Selector != nil {

		// query param selector
		var qrSelector string

		if o.Selector != nil {
			qrSelector = *o.Selector
		}
		qSelector := qrSelector
		if qSelector != "" {

			if err := r.SetQueryParam("selector", qSelector); err != nil {
				return err
			}
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// bindParamApplicationServiceWatch binds the parameter projects
func (o *ApplicationServiceWatchParams) bindParamProjects(formats strfmt.Registry) []string {
	projectsIR := o.Projects

	var projectsIC []string
	for _, projectsIIR := range projectsIR { // explode []string

		projectsIIV := projectsIIR // string as string
		projectsIC = append(projectsIC, projectsIIV)
	}

	// items.CollectionFormat: "multi"
	projectsIS := swag.JoinByFormat(projectsIC, "multi")

	return projectsIS
}
