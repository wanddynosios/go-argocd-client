// Code generated by go-swagger; DO NOT EDIT.

package certificate_service

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"

	"github.com/wanddynosios/go-argocd-client/models"
)

// NewCertificateServiceCreateCertificateParams creates a new CertificateServiceCreateCertificateParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewCertificateServiceCreateCertificateParams() *CertificateServiceCreateCertificateParams {
	return &CertificateServiceCreateCertificateParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewCertificateServiceCreateCertificateParamsWithTimeout creates a new CertificateServiceCreateCertificateParams object
// with the ability to set a timeout on a request.
func NewCertificateServiceCreateCertificateParamsWithTimeout(timeout time.Duration) *CertificateServiceCreateCertificateParams {
	return &CertificateServiceCreateCertificateParams{
		timeout: timeout,
	}
}

// NewCertificateServiceCreateCertificateParamsWithContext creates a new CertificateServiceCreateCertificateParams object
// with the ability to set a context for a request.
func NewCertificateServiceCreateCertificateParamsWithContext(ctx context.Context) *CertificateServiceCreateCertificateParams {
	return &CertificateServiceCreateCertificateParams{
		Context: ctx,
	}
}

// NewCertificateServiceCreateCertificateParamsWithHTTPClient creates a new CertificateServiceCreateCertificateParams object
// with the ability to set a custom HTTPClient for a request.
func NewCertificateServiceCreateCertificateParamsWithHTTPClient(client *http.Client) *CertificateServiceCreateCertificateParams {
	return &CertificateServiceCreateCertificateParams{
		HTTPClient: client,
	}
}

/* CertificateServiceCreateCertificateParams contains all the parameters to send to the API endpoint
   for the certificate service create certificate operation.

   Typically these are written to a http.Request.
*/
type CertificateServiceCreateCertificateParams struct {

	/* Body.

	   List of certificates to be created
	*/
	Body *models.V1alpha1RepositoryCertificateList

	/* Upsert.

	   Whether to upsert already existing certificates.
	*/
	Upsert *bool

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the certificate service create certificate params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *CertificateServiceCreateCertificateParams) WithDefaults() *CertificateServiceCreateCertificateParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the certificate service create certificate params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *CertificateServiceCreateCertificateParams) SetDefaults() {
	// no default values defined for this parameter
}

// WithTimeout adds the timeout to the certificate service create certificate params
func (o *CertificateServiceCreateCertificateParams) WithTimeout(timeout time.Duration) *CertificateServiceCreateCertificateParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the certificate service create certificate params
func (o *CertificateServiceCreateCertificateParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the certificate service create certificate params
func (o *CertificateServiceCreateCertificateParams) WithContext(ctx context.Context) *CertificateServiceCreateCertificateParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the certificate service create certificate params
func (o *CertificateServiceCreateCertificateParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the certificate service create certificate params
func (o *CertificateServiceCreateCertificateParams) WithHTTPClient(client *http.Client) *CertificateServiceCreateCertificateParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the certificate service create certificate params
func (o *CertificateServiceCreateCertificateParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithBody adds the body to the certificate service create certificate params
func (o *CertificateServiceCreateCertificateParams) WithBody(body *models.V1alpha1RepositoryCertificateList) *CertificateServiceCreateCertificateParams {
	o.SetBody(body)
	return o
}

// SetBody adds the body to the certificate service create certificate params
func (o *CertificateServiceCreateCertificateParams) SetBody(body *models.V1alpha1RepositoryCertificateList) {
	o.Body = body
}

// WithUpsert adds the upsert to the certificate service create certificate params
func (o *CertificateServiceCreateCertificateParams) WithUpsert(upsert *bool) *CertificateServiceCreateCertificateParams {
	o.SetUpsert(upsert)
	return o
}

// SetUpsert adds the upsert to the certificate service create certificate params
func (o *CertificateServiceCreateCertificateParams) SetUpsert(upsert *bool) {
	o.Upsert = upsert
}

// WriteToRequest writes these params to a swagger request
func (o *CertificateServiceCreateCertificateParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error
	if o.Body != nil {
		if err := r.SetBodyParam(o.Body); err != nil {
			return err
		}
	}

	if o.Upsert != nil {

		// query param upsert
		var qrUpsert bool

		if o.Upsert != nil {
			qrUpsert = *o.Upsert
		}
		qUpsert := swag.FormatBool(qrUpsert)
		if qUpsert != "" {

			if err := r.SetQueryParam("upsert", qUpsert); err != nil {
				return err
			}
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
