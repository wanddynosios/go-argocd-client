// Code generated by go-swagger; DO NOT EDIT.

package cluster_service

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new cluster service API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for cluster service API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption is the option for Client methods
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	ClusterServiceCreate(params *ClusterServiceCreateParams, opts ...ClientOption) (*ClusterServiceCreateOK, error)

	ClusterServiceDelete(params *ClusterServiceDeleteParams, opts ...ClientOption) (*ClusterServiceDeleteOK, error)

	ClusterServiceGet(params *ClusterServiceGetParams, opts ...ClientOption) (*ClusterServiceGetOK, error)

	ClusterServiceInvalidateCache(params *ClusterServiceInvalidateCacheParams, opts ...ClientOption) (*ClusterServiceInvalidateCacheOK, error)

	ClusterServiceList(params *ClusterServiceListParams, opts ...ClientOption) (*ClusterServiceListOK, error)

	ClusterServiceRotateAuth(params *ClusterServiceRotateAuthParams, opts ...ClientOption) (*ClusterServiceRotateAuthOK, error)

	ClusterServiceUpdate(params *ClusterServiceUpdateParams, opts ...ClientOption) (*ClusterServiceUpdateOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
  ClusterServiceCreate creates creates a cluster
*/
func (a *Client) ClusterServiceCreate(params *ClusterServiceCreateParams, opts ...ClientOption) (*ClusterServiceCreateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewClusterServiceCreateParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "ClusterService_Create",
		Method:             "POST",
		PathPattern:        "/api/v1/clusters",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ClusterServiceCreateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ClusterServiceCreateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ClusterServiceCreateDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  ClusterServiceDelete deletes deletes a cluster
*/
func (a *Client) ClusterServiceDelete(params *ClusterServiceDeleteParams, opts ...ClientOption) (*ClusterServiceDeleteOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewClusterServiceDeleteParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "ClusterService_Delete",
		Method:             "DELETE",
		PathPattern:        "/api/v1/clusters/{id.value}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ClusterServiceDeleteReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ClusterServiceDeleteOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ClusterServiceDeleteDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  ClusterServiceGet gets returns a cluster by server address
*/
func (a *Client) ClusterServiceGet(params *ClusterServiceGetParams, opts ...ClientOption) (*ClusterServiceGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewClusterServiceGetParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "ClusterService_Get",
		Method:             "GET",
		PathPattern:        "/api/v1/clusters/{id.value}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ClusterServiceGetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ClusterServiceGetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ClusterServiceGetDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  ClusterServiceInvalidateCache invalidates cache invalidates cluster cache
*/
func (a *Client) ClusterServiceInvalidateCache(params *ClusterServiceInvalidateCacheParams, opts ...ClientOption) (*ClusterServiceInvalidateCacheOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewClusterServiceInvalidateCacheParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "ClusterService_InvalidateCache",
		Method:             "POST",
		PathPattern:        "/api/v1/clusters/{id.value}/invalidate-cache",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ClusterServiceInvalidateCacheReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ClusterServiceInvalidateCacheOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ClusterServiceInvalidateCacheDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  ClusterServiceList lists returns list of clusters
*/
func (a *Client) ClusterServiceList(params *ClusterServiceListParams, opts ...ClientOption) (*ClusterServiceListOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewClusterServiceListParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "ClusterService_List",
		Method:             "GET",
		PathPattern:        "/api/v1/clusters",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ClusterServiceListReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ClusterServiceListOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ClusterServiceListDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  ClusterServiceRotateAuth rotates auth rotates the bearer token used for a cluster
*/
func (a *Client) ClusterServiceRotateAuth(params *ClusterServiceRotateAuthParams, opts ...ClientOption) (*ClusterServiceRotateAuthOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewClusterServiceRotateAuthParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "ClusterService_RotateAuth",
		Method:             "POST",
		PathPattern:        "/api/v1/clusters/{id.value}/rotate-auth",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ClusterServiceRotateAuthReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ClusterServiceRotateAuthOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ClusterServiceRotateAuthDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  ClusterServiceUpdate updates updates a cluster
*/
func (a *Client) ClusterServiceUpdate(params *ClusterServiceUpdateParams, opts ...ClientOption) (*ClusterServiceUpdateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewClusterServiceUpdateParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "ClusterService_Update",
		Method:             "PUT",
		PathPattern:        "/api/v1/clusters/{id.value}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ClusterServiceUpdateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ClusterServiceUpdateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ClusterServiceUpdateDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
