// Code generated by go-swagger; DO NOT EDIT.

package cluster_service

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"

	"github.com/wanddynosios/go-argocd-client/models"
)

// NewClusterServiceUpdateParams creates a new ClusterServiceUpdateParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewClusterServiceUpdateParams() *ClusterServiceUpdateParams {
	return &ClusterServiceUpdateParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewClusterServiceUpdateParamsWithTimeout creates a new ClusterServiceUpdateParams object
// with the ability to set a timeout on a request.
func NewClusterServiceUpdateParamsWithTimeout(timeout time.Duration) *ClusterServiceUpdateParams {
	return &ClusterServiceUpdateParams{
		timeout: timeout,
	}
}

// NewClusterServiceUpdateParamsWithContext creates a new ClusterServiceUpdateParams object
// with the ability to set a context for a request.
func NewClusterServiceUpdateParamsWithContext(ctx context.Context) *ClusterServiceUpdateParams {
	return &ClusterServiceUpdateParams{
		Context: ctx,
	}
}

// NewClusterServiceUpdateParamsWithHTTPClient creates a new ClusterServiceUpdateParams object
// with the ability to set a custom HTTPClient for a request.
func NewClusterServiceUpdateParamsWithHTTPClient(client *http.Client) *ClusterServiceUpdateParams {
	return &ClusterServiceUpdateParams{
		HTTPClient: client,
	}
}

/* ClusterServiceUpdateParams contains all the parameters to send to the API endpoint
   for the cluster service update operation.

   Typically these are written to a http.Request.
*/
type ClusterServiceUpdateParams struct {

	// Body.
	Body *models.V1alpha1Cluster

	/* IDType.

	   type is the type of the specified cluster identifier ( "server" - default, "name" ).
	*/
	IDType *string

	/* IDValue.

	   value holds the cluster server URL or cluster name
	*/
	IDValue string

	// UpdatedFields.
	UpdatedFields []string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the cluster service update params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *ClusterServiceUpdateParams) WithDefaults() *ClusterServiceUpdateParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the cluster service update params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *ClusterServiceUpdateParams) SetDefaults() {
	// no default values defined for this parameter
}

// WithTimeout adds the timeout to the cluster service update params
func (o *ClusterServiceUpdateParams) WithTimeout(timeout time.Duration) *ClusterServiceUpdateParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the cluster service update params
func (o *ClusterServiceUpdateParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the cluster service update params
func (o *ClusterServiceUpdateParams) WithContext(ctx context.Context) *ClusterServiceUpdateParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the cluster service update params
func (o *ClusterServiceUpdateParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the cluster service update params
func (o *ClusterServiceUpdateParams) WithHTTPClient(client *http.Client) *ClusterServiceUpdateParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the cluster service update params
func (o *ClusterServiceUpdateParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithBody adds the body to the cluster service update params
func (o *ClusterServiceUpdateParams) WithBody(body *models.V1alpha1Cluster) *ClusterServiceUpdateParams {
	o.SetBody(body)
	return o
}

// SetBody adds the body to the cluster service update params
func (o *ClusterServiceUpdateParams) SetBody(body *models.V1alpha1Cluster) {
	o.Body = body
}

// WithIDType adds the iDType to the cluster service update params
func (o *ClusterServiceUpdateParams) WithIDType(iDType *string) *ClusterServiceUpdateParams {
	o.SetIDType(iDType)
	return o
}

// SetIDType adds the idType to the cluster service update params
func (o *ClusterServiceUpdateParams) SetIDType(iDType *string) {
	o.IDType = iDType
}

// WithIDValue adds the iDValue to the cluster service update params
func (o *ClusterServiceUpdateParams) WithIDValue(iDValue string) *ClusterServiceUpdateParams {
	o.SetIDValue(iDValue)
	return o
}

// SetIDValue adds the idValue to the cluster service update params
func (o *ClusterServiceUpdateParams) SetIDValue(iDValue string) {
	o.IDValue = iDValue
}

// WithUpdatedFields adds the updatedFields to the cluster service update params
func (o *ClusterServiceUpdateParams) WithUpdatedFields(updatedFields []string) *ClusterServiceUpdateParams {
	o.SetUpdatedFields(updatedFields)
	return o
}

// SetUpdatedFields adds the updatedFields to the cluster service update params
func (o *ClusterServiceUpdateParams) SetUpdatedFields(updatedFields []string) {
	o.UpdatedFields = updatedFields
}

// WriteToRequest writes these params to a swagger request
func (o *ClusterServiceUpdateParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error
	if o.Body != nil {
		if err := r.SetBodyParam(o.Body); err != nil {
			return err
		}
	}

	if o.IDType != nil {

		// query param id.type
		var qrIDType string

		if o.IDType != nil {
			qrIDType = *o.IDType
		}
		qIDType := qrIDType
		if qIDType != "" {

			if err := r.SetQueryParam("id.type", qIDType); err != nil {
				return err
			}
		}
	}

	// path param id.value
	if err := r.SetPathParam("id.value", o.IDValue); err != nil {
		return err
	}

	if o.UpdatedFields != nil {

		// binding items for updatedFields
		joinedUpdatedFields := o.bindParamUpdatedFields(reg)

		// query array param updatedFields
		if err := r.SetQueryParam("updatedFields", joinedUpdatedFields...); err != nil {
			return err
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// bindParamClusterServiceUpdate binds the parameter updatedFields
func (o *ClusterServiceUpdateParams) bindParamUpdatedFields(formats strfmt.Registry) []string {
	updatedFieldsIR := o.UpdatedFields

	var updatedFieldsIC []string
	for _, updatedFieldsIIR := range updatedFieldsIR { // explode []string

		updatedFieldsIIV := updatedFieldsIIR // string as string
		updatedFieldsIC = append(updatedFieldsIC, updatedFieldsIIV)
	}

	// items.CollectionFormat: "multi"
	updatedFieldsIS := swag.JoinByFormat(updatedFieldsIC, "multi")

	return updatedFieldsIS
}
