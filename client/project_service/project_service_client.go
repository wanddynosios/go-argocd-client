// Code generated by go-swagger; DO NOT EDIT.

package project_service

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new project service API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for project service API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption is the option for Client methods
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	ProjectServiceCreate(params *ProjectServiceCreateParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ProjectServiceCreateOK, error)

	ProjectServiceCreateToken(params *ProjectServiceCreateTokenParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ProjectServiceCreateTokenOK, error)

	ProjectServiceDelete(params *ProjectServiceDeleteParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ProjectServiceDeleteOK, error)

	ProjectServiceDeleteToken(params *ProjectServiceDeleteTokenParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ProjectServiceDeleteTokenOK, error)

	ProjectServiceGet(params *ProjectServiceGetParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ProjectServiceGetOK, error)

	ProjectServiceGetDetailedProject(params *ProjectServiceGetDetailedProjectParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ProjectServiceGetDetailedProjectOK, error)

	ProjectServiceGetGlobalProjects(params *ProjectServiceGetGlobalProjectsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ProjectServiceGetGlobalProjectsOK, error)

	ProjectServiceGetSyncWindowsState(params *ProjectServiceGetSyncWindowsStateParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ProjectServiceGetSyncWindowsStateOK, error)

	ProjectServiceList(params *ProjectServiceListParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ProjectServiceListOK, error)

	ProjectServiceListEvents(params *ProjectServiceListEventsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ProjectServiceListEventsOK, error)

	ProjectServiceUpdate(params *ProjectServiceUpdateParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ProjectServiceUpdateOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
  ProjectServiceCreate creates a new project
*/
func (a *Client) ProjectServiceCreate(params *ProjectServiceCreateParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ProjectServiceCreateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewProjectServiceCreateParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "ProjectService_Create",
		Method:             "POST",
		PathPattern:        "/api/v1/projects",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ProjectServiceCreateReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ProjectServiceCreateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ProjectServiceCreateDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  ProjectServiceCreateToken creates a new project token
*/
func (a *Client) ProjectServiceCreateToken(params *ProjectServiceCreateTokenParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ProjectServiceCreateTokenOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewProjectServiceCreateTokenParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "ProjectService_CreateToken",
		Method:             "POST",
		PathPattern:        "/api/v1/projects/{project}/roles/{role}/token",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ProjectServiceCreateTokenReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ProjectServiceCreateTokenOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ProjectServiceCreateTokenDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  ProjectServiceDelete deletes deletes a project
*/
func (a *Client) ProjectServiceDelete(params *ProjectServiceDeleteParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ProjectServiceDeleteOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewProjectServiceDeleteParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "ProjectService_Delete",
		Method:             "DELETE",
		PathPattern:        "/api/v1/projects/{name}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ProjectServiceDeleteReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ProjectServiceDeleteOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ProjectServiceDeleteDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  ProjectServiceDeleteToken deletes a new project token
*/
func (a *Client) ProjectServiceDeleteToken(params *ProjectServiceDeleteTokenParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ProjectServiceDeleteTokenOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewProjectServiceDeleteTokenParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "ProjectService_DeleteToken",
		Method:             "DELETE",
		PathPattern:        "/api/v1/projects/{project}/roles/{role}/token/{iat}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ProjectServiceDeleteTokenReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ProjectServiceDeleteTokenOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ProjectServiceDeleteTokenDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  ProjectServiceGet gets returns a project by name
*/
func (a *Client) ProjectServiceGet(params *ProjectServiceGetParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ProjectServiceGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewProjectServiceGetParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "ProjectService_Get",
		Method:             "GET",
		PathPattern:        "/api/v1/projects/{name}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ProjectServiceGetReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ProjectServiceGetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ProjectServiceGetDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  ProjectServiceGetDetailedProject gets detailed project returns a project that include project global project and scoped resources by name
*/
func (a *Client) ProjectServiceGetDetailedProject(params *ProjectServiceGetDetailedProjectParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ProjectServiceGetDetailedProjectOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewProjectServiceGetDetailedProjectParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "ProjectService_GetDetailedProject",
		Method:             "GET",
		PathPattern:        "/api/v1/projects/{name}/detailed",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ProjectServiceGetDetailedProjectReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ProjectServiceGetDetailedProjectOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ProjectServiceGetDetailedProjectDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  ProjectServiceGetGlobalProjects gets returns a virtual project by name
*/
func (a *Client) ProjectServiceGetGlobalProjects(params *ProjectServiceGetGlobalProjectsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ProjectServiceGetGlobalProjectsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewProjectServiceGetGlobalProjectsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "ProjectService_GetGlobalProjects",
		Method:             "GET",
		PathPattern:        "/api/v1/projects/{name}/globalprojects",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ProjectServiceGetGlobalProjectsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ProjectServiceGetGlobalProjectsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ProjectServiceGetGlobalProjectsDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  ProjectServiceGetSyncWindowsState gets schedules state returns true if there are any active sync sync windows
*/
func (a *Client) ProjectServiceGetSyncWindowsState(params *ProjectServiceGetSyncWindowsStateParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ProjectServiceGetSyncWindowsStateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewProjectServiceGetSyncWindowsStateParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "ProjectService_GetSyncWindowsState",
		Method:             "GET",
		PathPattern:        "/api/v1/projects/{name}/syncwindows",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ProjectServiceGetSyncWindowsStateReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ProjectServiceGetSyncWindowsStateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ProjectServiceGetSyncWindowsStateDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  ProjectServiceList lists returns list of projects
*/
func (a *Client) ProjectServiceList(params *ProjectServiceListParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ProjectServiceListOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewProjectServiceListParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "ProjectService_List",
		Method:             "GET",
		PathPattern:        "/api/v1/projects",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ProjectServiceListReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ProjectServiceListOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ProjectServiceListDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  ProjectServiceListEvents lists events returns a list of project events
*/
func (a *Client) ProjectServiceListEvents(params *ProjectServiceListEventsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ProjectServiceListEventsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewProjectServiceListEventsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "ProjectService_ListEvents",
		Method:             "GET",
		PathPattern:        "/api/v1/projects/{name}/events",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ProjectServiceListEventsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ProjectServiceListEventsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ProjectServiceListEventsDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  ProjectServiceUpdate updates updates a project
*/
func (a *Client) ProjectServiceUpdate(params *ProjectServiceUpdateParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ProjectServiceUpdateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewProjectServiceUpdateParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "ProjectService_Update",
		Method:             "PUT",
		PathPattern:        "/api/v1/projects/{project.metadata.name}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ProjectServiceUpdateReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ProjectServiceUpdateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ProjectServiceUpdateDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
