// Code generated by go-swagger; DO NOT EDIT.

package project_service

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"

	"github.com/wanddynosios/go-argocd-client/models"
)

// NewProjectServiceCreateTokenParams creates a new ProjectServiceCreateTokenParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewProjectServiceCreateTokenParams() *ProjectServiceCreateTokenParams {
	return &ProjectServiceCreateTokenParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewProjectServiceCreateTokenParamsWithTimeout creates a new ProjectServiceCreateTokenParams object
// with the ability to set a timeout on a request.
func NewProjectServiceCreateTokenParamsWithTimeout(timeout time.Duration) *ProjectServiceCreateTokenParams {
	return &ProjectServiceCreateTokenParams{
		timeout: timeout,
	}
}

// NewProjectServiceCreateTokenParamsWithContext creates a new ProjectServiceCreateTokenParams object
// with the ability to set a context for a request.
func NewProjectServiceCreateTokenParamsWithContext(ctx context.Context) *ProjectServiceCreateTokenParams {
	return &ProjectServiceCreateTokenParams{
		Context: ctx,
	}
}

// NewProjectServiceCreateTokenParamsWithHTTPClient creates a new ProjectServiceCreateTokenParams object
// with the ability to set a custom HTTPClient for a request.
func NewProjectServiceCreateTokenParamsWithHTTPClient(client *http.Client) *ProjectServiceCreateTokenParams {
	return &ProjectServiceCreateTokenParams{
		HTTPClient: client,
	}
}

/* ProjectServiceCreateTokenParams contains all the parameters to send to the API endpoint
   for the project service create token operation.

   Typically these are written to a http.Request.
*/
type ProjectServiceCreateTokenParams struct {

	// Body.
	Body *models.ProjectProjectTokenCreateRequest

	// Project.
	Project string

	// Role.
	Role string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the project service create token params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *ProjectServiceCreateTokenParams) WithDefaults() *ProjectServiceCreateTokenParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the project service create token params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *ProjectServiceCreateTokenParams) SetDefaults() {
	// no default values defined for this parameter
}

// WithTimeout adds the timeout to the project service create token params
func (o *ProjectServiceCreateTokenParams) WithTimeout(timeout time.Duration) *ProjectServiceCreateTokenParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the project service create token params
func (o *ProjectServiceCreateTokenParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the project service create token params
func (o *ProjectServiceCreateTokenParams) WithContext(ctx context.Context) *ProjectServiceCreateTokenParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the project service create token params
func (o *ProjectServiceCreateTokenParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the project service create token params
func (o *ProjectServiceCreateTokenParams) WithHTTPClient(client *http.Client) *ProjectServiceCreateTokenParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the project service create token params
func (o *ProjectServiceCreateTokenParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithBody adds the body to the project service create token params
func (o *ProjectServiceCreateTokenParams) WithBody(body *models.ProjectProjectTokenCreateRequest) *ProjectServiceCreateTokenParams {
	o.SetBody(body)
	return o
}

// SetBody adds the body to the project service create token params
func (o *ProjectServiceCreateTokenParams) SetBody(body *models.ProjectProjectTokenCreateRequest) {
	o.Body = body
}

// WithProject adds the project to the project service create token params
func (o *ProjectServiceCreateTokenParams) WithProject(project string) *ProjectServiceCreateTokenParams {
	o.SetProject(project)
	return o
}

// SetProject adds the project to the project service create token params
func (o *ProjectServiceCreateTokenParams) SetProject(project string) {
	o.Project = project
}

// WithRole adds the role to the project service create token params
func (o *ProjectServiceCreateTokenParams) WithRole(role string) *ProjectServiceCreateTokenParams {
	o.SetRole(role)
	return o
}

// SetRole adds the role to the project service create token params
func (o *ProjectServiceCreateTokenParams) SetRole(role string) {
	o.Role = role
}

// WriteToRequest writes these params to a swagger request
func (o *ProjectServiceCreateTokenParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error
	if o.Body != nil {
		if err := r.SetBodyParam(o.Body); err != nil {
			return err
		}
	}

	// path param project
	if err := r.SetPathParam("project", o.Project); err != nil {
		return err
	}

	// path param role
	if err := r.SetPathParam("role", o.Role); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
