// Code generated by go-swagger; DO NOT EDIT.

package repository_service

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new repository service API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for repository service API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption is the option for Client methods
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	RepositoryServiceCreateRepository(params *RepositoryServiceCreateRepositoryParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*RepositoryServiceCreateRepositoryOK, error)

	RepositoryServiceDeleteRepository(params *RepositoryServiceDeleteRepositoryParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*RepositoryServiceDeleteRepositoryOK, error)

	RepositoryServiceGet(params *RepositoryServiceGetParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*RepositoryServiceGetOK, error)

	RepositoryServiceGetAppDetails(params *RepositoryServiceGetAppDetailsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*RepositoryServiceGetAppDetailsOK, error)

	RepositoryServiceGetHelmCharts(params *RepositoryServiceGetHelmChartsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*RepositoryServiceGetHelmChartsOK, error)

	RepositoryServiceListApps(params *RepositoryServiceListAppsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*RepositoryServiceListAppsOK, error)

	RepositoryServiceListRefs(params *RepositoryServiceListRefsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*RepositoryServiceListRefsOK, error)

	RepositoryServiceListRepositories(params *RepositoryServiceListRepositoriesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*RepositoryServiceListRepositoriesOK, error)

	RepositoryServiceUpdateRepository(params *RepositoryServiceUpdateRepositoryParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*RepositoryServiceUpdateRepositoryOK, error)

	RepositoryServiceValidateAccess(params *RepositoryServiceValidateAccessParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*RepositoryServiceValidateAccessOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
  RepositoryServiceCreateRepository creates repository creates a new repository configuration
*/
func (a *Client) RepositoryServiceCreateRepository(params *RepositoryServiceCreateRepositoryParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*RepositoryServiceCreateRepositoryOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewRepositoryServiceCreateRepositoryParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "RepositoryService_CreateRepository",
		Method:             "POST",
		PathPattern:        "/api/v1/repositories",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &RepositoryServiceCreateRepositoryReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*RepositoryServiceCreateRepositoryOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*RepositoryServiceCreateRepositoryDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  RepositoryServiceDeleteRepository deletes repository deletes a repository from the configuration
*/
func (a *Client) RepositoryServiceDeleteRepository(params *RepositoryServiceDeleteRepositoryParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*RepositoryServiceDeleteRepositoryOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewRepositoryServiceDeleteRepositoryParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "RepositoryService_DeleteRepository",
		Method:             "DELETE",
		PathPattern:        "/api/v1/repositories/{repo}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &RepositoryServiceDeleteRepositoryReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*RepositoryServiceDeleteRepositoryOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*RepositoryServiceDeleteRepositoryDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  RepositoryServiceGet gets returns a repository or its credentials
*/
func (a *Client) RepositoryServiceGet(params *RepositoryServiceGetParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*RepositoryServiceGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewRepositoryServiceGetParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "RepositoryService_Get",
		Method:             "GET",
		PathPattern:        "/api/v1/repositories/{repo}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &RepositoryServiceGetReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*RepositoryServiceGetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*RepositoryServiceGetDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  RepositoryServiceGetAppDetails gets app details returns application details by given path
*/
func (a *Client) RepositoryServiceGetAppDetails(params *RepositoryServiceGetAppDetailsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*RepositoryServiceGetAppDetailsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewRepositoryServiceGetAppDetailsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "RepositoryService_GetAppDetails",
		Method:             "POST",
		PathPattern:        "/api/v1/repositories/{source.repoURL}/appdetails",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &RepositoryServiceGetAppDetailsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*RepositoryServiceGetAppDetailsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*RepositoryServiceGetAppDetailsDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  RepositoryServiceGetHelmCharts gets helm charts returns list of helm charts in the specified repository
*/
func (a *Client) RepositoryServiceGetHelmCharts(params *RepositoryServiceGetHelmChartsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*RepositoryServiceGetHelmChartsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewRepositoryServiceGetHelmChartsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "RepositoryService_GetHelmCharts",
		Method:             "GET",
		PathPattern:        "/api/v1/repositories/{repo}/helmcharts",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &RepositoryServiceGetHelmChartsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*RepositoryServiceGetHelmChartsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*RepositoryServiceGetHelmChartsDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  RepositoryServiceListApps lists apps returns list of apps in the repo
*/
func (a *Client) RepositoryServiceListApps(params *RepositoryServiceListAppsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*RepositoryServiceListAppsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewRepositoryServiceListAppsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "RepositoryService_ListApps",
		Method:             "GET",
		PathPattern:        "/api/v1/repositories/{repo}/apps",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &RepositoryServiceListAppsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*RepositoryServiceListAppsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*RepositoryServiceListAppsDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  RepositoryServiceListRefs repository service list refs API
*/
func (a *Client) RepositoryServiceListRefs(params *RepositoryServiceListRefsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*RepositoryServiceListRefsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewRepositoryServiceListRefsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "RepositoryService_ListRefs",
		Method:             "GET",
		PathPattern:        "/api/v1/repositories/{repo}/refs",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &RepositoryServiceListRefsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*RepositoryServiceListRefsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*RepositoryServiceListRefsDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  RepositoryServiceListRepositories lists repositories gets a list of all configured repositories
*/
func (a *Client) RepositoryServiceListRepositories(params *RepositoryServiceListRepositoriesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*RepositoryServiceListRepositoriesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewRepositoryServiceListRepositoriesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "RepositoryService_ListRepositories",
		Method:             "GET",
		PathPattern:        "/api/v1/repositories",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &RepositoryServiceListRepositoriesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*RepositoryServiceListRepositoriesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*RepositoryServiceListRepositoriesDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  RepositoryServiceUpdateRepository updates repository updates a repository configuration
*/
func (a *Client) RepositoryServiceUpdateRepository(params *RepositoryServiceUpdateRepositoryParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*RepositoryServiceUpdateRepositoryOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewRepositoryServiceUpdateRepositoryParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "RepositoryService_UpdateRepository",
		Method:             "PUT",
		PathPattern:        "/api/v1/repositories/{repo.repo}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &RepositoryServiceUpdateRepositoryReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*RepositoryServiceUpdateRepositoryOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*RepositoryServiceUpdateRepositoryDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  RepositoryServiceValidateAccess validates access validates access to a repository with given parameters
*/
func (a *Client) RepositoryServiceValidateAccess(params *RepositoryServiceValidateAccessParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*RepositoryServiceValidateAccessOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewRepositoryServiceValidateAccessParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "RepositoryService_ValidateAccess",
		Method:             "POST",
		PathPattern:        "/api/v1/repositories/{repo}/validate",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &RepositoryServiceValidateAccessReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*RepositoryServiceValidateAccessOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*RepositoryServiceValidateAccessDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
