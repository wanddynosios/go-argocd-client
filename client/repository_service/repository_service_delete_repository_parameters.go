// Code generated by go-swagger; DO NOT EDIT.

package repository_service

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewRepositoryServiceDeleteRepositoryParams creates a new RepositoryServiceDeleteRepositoryParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewRepositoryServiceDeleteRepositoryParams() *RepositoryServiceDeleteRepositoryParams {
	return &RepositoryServiceDeleteRepositoryParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewRepositoryServiceDeleteRepositoryParamsWithTimeout creates a new RepositoryServiceDeleteRepositoryParams object
// with the ability to set a timeout on a request.
func NewRepositoryServiceDeleteRepositoryParamsWithTimeout(timeout time.Duration) *RepositoryServiceDeleteRepositoryParams {
	return &RepositoryServiceDeleteRepositoryParams{
		timeout: timeout,
	}
}

// NewRepositoryServiceDeleteRepositoryParamsWithContext creates a new RepositoryServiceDeleteRepositoryParams object
// with the ability to set a context for a request.
func NewRepositoryServiceDeleteRepositoryParamsWithContext(ctx context.Context) *RepositoryServiceDeleteRepositoryParams {
	return &RepositoryServiceDeleteRepositoryParams{
		Context: ctx,
	}
}

// NewRepositoryServiceDeleteRepositoryParamsWithHTTPClient creates a new RepositoryServiceDeleteRepositoryParams object
// with the ability to set a custom HTTPClient for a request.
func NewRepositoryServiceDeleteRepositoryParamsWithHTTPClient(client *http.Client) *RepositoryServiceDeleteRepositoryParams {
	return &RepositoryServiceDeleteRepositoryParams{
		HTTPClient: client,
	}
}

/* RepositoryServiceDeleteRepositoryParams contains all the parameters to send to the API endpoint
   for the repository service delete repository operation.

   Typically these are written to a http.Request.
*/
type RepositoryServiceDeleteRepositoryParams struct {

	/* ForceRefresh.

	   Whether to force a cache refresh on repo's connection state.
	*/
	ForceRefresh *bool

	/* Repo.

	   Repo URL for query
	*/
	Repo string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the repository service delete repository params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *RepositoryServiceDeleteRepositoryParams) WithDefaults() *RepositoryServiceDeleteRepositoryParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the repository service delete repository params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *RepositoryServiceDeleteRepositoryParams) SetDefaults() {
	// no default values defined for this parameter
}

// WithTimeout adds the timeout to the repository service delete repository params
func (o *RepositoryServiceDeleteRepositoryParams) WithTimeout(timeout time.Duration) *RepositoryServiceDeleteRepositoryParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the repository service delete repository params
func (o *RepositoryServiceDeleteRepositoryParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the repository service delete repository params
func (o *RepositoryServiceDeleteRepositoryParams) WithContext(ctx context.Context) *RepositoryServiceDeleteRepositoryParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the repository service delete repository params
func (o *RepositoryServiceDeleteRepositoryParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the repository service delete repository params
func (o *RepositoryServiceDeleteRepositoryParams) WithHTTPClient(client *http.Client) *RepositoryServiceDeleteRepositoryParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the repository service delete repository params
func (o *RepositoryServiceDeleteRepositoryParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithForceRefresh adds the forceRefresh to the repository service delete repository params
func (o *RepositoryServiceDeleteRepositoryParams) WithForceRefresh(forceRefresh *bool) *RepositoryServiceDeleteRepositoryParams {
	o.SetForceRefresh(forceRefresh)
	return o
}

// SetForceRefresh adds the forceRefresh to the repository service delete repository params
func (o *RepositoryServiceDeleteRepositoryParams) SetForceRefresh(forceRefresh *bool) {
	o.ForceRefresh = forceRefresh
}

// WithRepo adds the repo to the repository service delete repository params
func (o *RepositoryServiceDeleteRepositoryParams) WithRepo(repo string) *RepositoryServiceDeleteRepositoryParams {
	o.SetRepo(repo)
	return o
}

// SetRepo adds the repo to the repository service delete repository params
func (o *RepositoryServiceDeleteRepositoryParams) SetRepo(repo string) {
	o.Repo = repo
}

// WriteToRequest writes these params to a swagger request
func (o *RepositoryServiceDeleteRepositoryParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.ForceRefresh != nil {

		// query param forceRefresh
		var qrForceRefresh bool

		if o.ForceRefresh != nil {
			qrForceRefresh = *o.ForceRefresh
		}
		qForceRefresh := swag.FormatBool(qrForceRefresh)
		if qForceRefresh != "" {

			if err := r.SetQueryParam("forceRefresh", qForceRefresh); err != nil {
				return err
			}
		}
	}

	// path param repo
	if err := r.SetPathParam("repo", o.Repo); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
