// Code generated by go-swagger; DO NOT EDIT.

package repository_service

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
)

// NewRepositoryServiceListAppsParams creates a new RepositoryServiceListAppsParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewRepositoryServiceListAppsParams() *RepositoryServiceListAppsParams {
	return &RepositoryServiceListAppsParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewRepositoryServiceListAppsParamsWithTimeout creates a new RepositoryServiceListAppsParams object
// with the ability to set a timeout on a request.
func NewRepositoryServiceListAppsParamsWithTimeout(timeout time.Duration) *RepositoryServiceListAppsParams {
	return &RepositoryServiceListAppsParams{
		timeout: timeout,
	}
}

// NewRepositoryServiceListAppsParamsWithContext creates a new RepositoryServiceListAppsParams object
// with the ability to set a context for a request.
func NewRepositoryServiceListAppsParamsWithContext(ctx context.Context) *RepositoryServiceListAppsParams {
	return &RepositoryServiceListAppsParams{
		Context: ctx,
	}
}

// NewRepositoryServiceListAppsParamsWithHTTPClient creates a new RepositoryServiceListAppsParams object
// with the ability to set a custom HTTPClient for a request.
func NewRepositoryServiceListAppsParamsWithHTTPClient(client *http.Client) *RepositoryServiceListAppsParams {
	return &RepositoryServiceListAppsParams{
		HTTPClient: client,
	}
}

/* RepositoryServiceListAppsParams contains all the parameters to send to the API endpoint
   for the repository service list apps operation.

   Typically these are written to a http.Request.
*/
type RepositoryServiceListAppsParams struct {

	// AppName.
	AppName *string

	// AppProject.
	AppProject *string

	// Repo.
	Repo string

	// Revision.
	Revision *string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the repository service list apps params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *RepositoryServiceListAppsParams) WithDefaults() *RepositoryServiceListAppsParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the repository service list apps params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *RepositoryServiceListAppsParams) SetDefaults() {
	// no default values defined for this parameter
}

// WithTimeout adds the timeout to the repository service list apps params
func (o *RepositoryServiceListAppsParams) WithTimeout(timeout time.Duration) *RepositoryServiceListAppsParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the repository service list apps params
func (o *RepositoryServiceListAppsParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the repository service list apps params
func (o *RepositoryServiceListAppsParams) WithContext(ctx context.Context) *RepositoryServiceListAppsParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the repository service list apps params
func (o *RepositoryServiceListAppsParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the repository service list apps params
func (o *RepositoryServiceListAppsParams) WithHTTPClient(client *http.Client) *RepositoryServiceListAppsParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the repository service list apps params
func (o *RepositoryServiceListAppsParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithAppName adds the appName to the repository service list apps params
func (o *RepositoryServiceListAppsParams) WithAppName(appName *string) *RepositoryServiceListAppsParams {
	o.SetAppName(appName)
	return o
}

// SetAppName adds the appName to the repository service list apps params
func (o *RepositoryServiceListAppsParams) SetAppName(appName *string) {
	o.AppName = appName
}

// WithAppProject adds the appProject to the repository service list apps params
func (o *RepositoryServiceListAppsParams) WithAppProject(appProject *string) *RepositoryServiceListAppsParams {
	o.SetAppProject(appProject)
	return o
}

// SetAppProject adds the appProject to the repository service list apps params
func (o *RepositoryServiceListAppsParams) SetAppProject(appProject *string) {
	o.AppProject = appProject
}

// WithRepo adds the repo to the repository service list apps params
func (o *RepositoryServiceListAppsParams) WithRepo(repo string) *RepositoryServiceListAppsParams {
	o.SetRepo(repo)
	return o
}

// SetRepo adds the repo to the repository service list apps params
func (o *RepositoryServiceListAppsParams) SetRepo(repo string) {
	o.Repo = repo
}

// WithRevision adds the revision to the repository service list apps params
func (o *RepositoryServiceListAppsParams) WithRevision(revision *string) *RepositoryServiceListAppsParams {
	o.SetRevision(revision)
	return o
}

// SetRevision adds the revision to the repository service list apps params
func (o *RepositoryServiceListAppsParams) SetRevision(revision *string) {
	o.Revision = revision
}

// WriteToRequest writes these params to a swagger request
func (o *RepositoryServiceListAppsParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.AppName != nil {

		// query param appName
		var qrAppName string

		if o.AppName != nil {
			qrAppName = *o.AppName
		}
		qAppName := qrAppName
		if qAppName != "" {

			if err := r.SetQueryParam("appName", qAppName); err != nil {
				return err
			}
		}
	}

	if o.AppProject != nil {

		// query param appProject
		var qrAppProject string

		if o.AppProject != nil {
			qrAppProject = *o.AppProject
		}
		qAppProject := qrAppProject
		if qAppProject != "" {

			if err := r.SetQueryParam("appProject", qAppProject); err != nil {
				return err
			}
		}
	}

	// path param repo
	if err := r.SetPathParam("repo", o.Repo); err != nil {
		return err
	}

	if o.Revision != nil {

		// query param revision
		var qrRevision string

		if o.Revision != nil {
			qrRevision = *o.Revision
		}
		qRevision := qrRevision
		if qRevision != "" {

			if err := r.SetQueryParam("revision", qRevision); err != nil {
				return err
			}
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
