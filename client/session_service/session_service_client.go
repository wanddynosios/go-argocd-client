// Code generated by go-swagger; DO NOT EDIT.

package session_service

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new session service API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for session service API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption is the option for Client methods
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	SessionServiceCreate(params *SessionServiceCreateParams, opts ...ClientOption) (*SessionServiceCreateOK, error)

	SessionServiceDelete(params *SessionServiceDeleteParams, opts ...ClientOption) (*SessionServiceDeleteOK, error)

	SessionServiceGetUserInfo(params *SessionServiceGetUserInfoParams, opts ...ClientOption) (*SessionServiceGetUserInfoOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
  SessionServiceCreate creates a new j w t for authentication and set a cookie if using HTTP
*/
func (a *Client) SessionServiceCreate(params *SessionServiceCreateParams, opts ...ClientOption) (*SessionServiceCreateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSessionServiceCreateParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "SessionService_Create",
		Method:             "POST",
		PathPattern:        "/api/v1/session",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &SessionServiceCreateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*SessionServiceCreateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*SessionServiceCreateDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  SessionServiceDelete deletes an existing j w t cookie if using HTTP
*/
func (a *Client) SessionServiceDelete(params *SessionServiceDeleteParams, opts ...ClientOption) (*SessionServiceDeleteOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSessionServiceDeleteParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "SessionService_Delete",
		Method:             "DELETE",
		PathPattern:        "/api/v1/session",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &SessionServiceDeleteReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*SessionServiceDeleteOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*SessionServiceDeleteDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  SessionServiceGetUserInfo gets the current user s info
*/
func (a *Client) SessionServiceGetUserInfo(params *SessionServiceGetUserInfoParams, opts ...ClientOption) (*SessionServiceGetUserInfoOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSessionServiceGetUserInfoParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "SessionService_GetUserInfo",
		Method:             "GET",
		PathPattern:        "/api/v1/session/userinfo",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &SessionServiceGetUserInfoReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*SessionServiceGetUserInfoOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*SessionServiceGetUserInfoDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
