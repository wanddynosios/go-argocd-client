// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// ApplicationApplicationSyncWindowsResponse application application sync windows response
//
// swagger:model applicationApplicationSyncWindowsResponse
type ApplicationApplicationSyncWindowsResponse struct {

	// active windows
	ActiveWindows []*ApplicationApplicationSyncWindow `json:"activeWindows"`

	// assigned windows
	AssignedWindows []*ApplicationApplicationSyncWindow `json:"assignedWindows"`

	// can sync
	CanSync bool `json:"canSync,omitempty"`
}

// Validate validates this application application sync windows response
func (m *ApplicationApplicationSyncWindowsResponse) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateActiveWindows(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateAssignedWindows(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ApplicationApplicationSyncWindowsResponse) validateActiveWindows(formats strfmt.Registry) error {
	if swag.IsZero(m.ActiveWindows) { // not required
		return nil
	}

	for i := 0; i < len(m.ActiveWindows); i++ {
		if swag.IsZero(m.ActiveWindows[i]) { // not required
			continue
		}

		if m.ActiveWindows[i] != nil {
			if err := m.ActiveWindows[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("activeWindows" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("activeWindows" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *ApplicationApplicationSyncWindowsResponse) validateAssignedWindows(formats strfmt.Registry) error {
	if swag.IsZero(m.AssignedWindows) { // not required
		return nil
	}

	for i := 0; i < len(m.AssignedWindows); i++ {
		if swag.IsZero(m.AssignedWindows[i]) { // not required
			continue
		}

		if m.AssignedWindows[i] != nil {
			if err := m.AssignedWindows[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("assignedWindows" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("assignedWindows" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this application application sync windows response based on the context it is used
func (m *ApplicationApplicationSyncWindowsResponse) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateActiveWindows(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateAssignedWindows(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ApplicationApplicationSyncWindowsResponse) contextValidateActiveWindows(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.ActiveWindows); i++ {

		if m.ActiveWindows[i] != nil {
			if err := m.ActiveWindows[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("activeWindows" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("activeWindows" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *ApplicationApplicationSyncWindowsResponse) contextValidateAssignedWindows(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.AssignedWindows); i++ {

		if m.AssignedWindows[i] != nil {
			if err := m.AssignedWindows[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("assignedWindows" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("assignedWindows" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *ApplicationApplicationSyncWindowsResponse) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ApplicationApplicationSyncWindowsResponse) UnmarshalBinary(b []byte) error {
	var res ApplicationApplicationSyncWindowsResponse
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
