// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// RepositoryRepoAppDetailsResponse RepoAppDetailsResponse application details
//
// swagger:model repositoryRepoAppDetailsResponse
type RepositoryRepoAppDetailsResponse struct {

	// directory
	Directory RepositoryDirectoryAppSpec `json:"directory,omitempty"`

	// helm
	Helm *RepositoryHelmAppSpec `json:"helm,omitempty"`

	// kustomize
	Kustomize *RepositoryKustomizeAppSpec `json:"kustomize,omitempty"`

	// type
	Type string `json:"type,omitempty"`
}

// Validate validates this repository repo app details response
func (m *RepositoryRepoAppDetailsResponse) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateHelm(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateKustomize(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *RepositoryRepoAppDetailsResponse) validateHelm(formats strfmt.Registry) error {
	if swag.IsZero(m.Helm) { // not required
		return nil
	}

	if m.Helm != nil {
		if err := m.Helm.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("helm")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("helm")
			}
			return err
		}
	}

	return nil
}

func (m *RepositoryRepoAppDetailsResponse) validateKustomize(formats strfmt.Registry) error {
	if swag.IsZero(m.Kustomize) { // not required
		return nil
	}

	if m.Kustomize != nil {
		if err := m.Kustomize.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("kustomize")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("kustomize")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this repository repo app details response based on the context it is used
func (m *RepositoryRepoAppDetailsResponse) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateHelm(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateKustomize(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *RepositoryRepoAppDetailsResponse) contextValidateHelm(ctx context.Context, formats strfmt.Registry) error {

	if m.Helm != nil {
		if err := m.Helm.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("helm")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("helm")
			}
			return err
		}
	}

	return nil
}

func (m *RepositoryRepoAppDetailsResponse) contextValidateKustomize(ctx context.Context, formats strfmt.Registry) error {

	if m.Kustomize != nil {
		if err := m.Kustomize.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("kustomize")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("kustomize")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *RepositoryRepoAppDetailsResponse) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *RepositoryRepoAppDetailsResponse) UnmarshalBinary(b []byte) error {
	var res RepositoryRepoAppDetailsResponse
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
