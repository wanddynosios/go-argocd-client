// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// V1alpha1ApplicationSource ApplicationSource contains all required information about the source of an application
//
// swagger:model v1alpha1ApplicationSource
type V1alpha1ApplicationSource struct {

	// Chart is a Helm chart name, and must be specified for applications sourced from a Helm repo.
	Chart string `json:"chart,omitempty"`

	// directory
	Directory *V1alpha1ApplicationSourceDirectory `json:"directory,omitempty"`

	// helm
	Helm *V1alpha1ApplicationSourceHelm `json:"helm,omitempty"`

	// kustomize
	Kustomize *V1alpha1ApplicationSourceKustomize `json:"kustomize,omitempty"`

	// Path is a directory path within the Git repository, and is only valid for applications sourced from Git.
	Path string `json:"path,omitempty"`

	// plugin
	Plugin *V1alpha1ApplicationSourcePlugin `json:"plugin,omitempty"`

	// RepoURL is the URL to the repository (Git or Helm) that contains the application manifests
	RepoURL string `json:"repoURL,omitempty"`

	// TargetRevision defines the revision of the source to sync the application to.
	// In case of Git, this can be commit, tag, or branch. If omitted, will equal to HEAD.
	// In case of Helm, this is a semver tag for the Chart's version.
	TargetRevision string `json:"targetRevision,omitempty"`
}

// Validate validates this v1alpha1 application source
func (m *V1alpha1ApplicationSource) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateDirectory(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateHelm(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateKustomize(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePlugin(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *V1alpha1ApplicationSource) validateDirectory(formats strfmt.Registry) error {
	if swag.IsZero(m.Directory) { // not required
		return nil
	}

	if m.Directory != nil {
		if err := m.Directory.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("directory")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("directory")
			}
			return err
		}
	}

	return nil
}

func (m *V1alpha1ApplicationSource) validateHelm(formats strfmt.Registry) error {
	if swag.IsZero(m.Helm) { // not required
		return nil
	}

	if m.Helm != nil {
		if err := m.Helm.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("helm")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("helm")
			}
			return err
		}
	}

	return nil
}

func (m *V1alpha1ApplicationSource) validateKustomize(formats strfmt.Registry) error {
	if swag.IsZero(m.Kustomize) { // not required
		return nil
	}

	if m.Kustomize != nil {
		if err := m.Kustomize.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("kustomize")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("kustomize")
			}
			return err
		}
	}

	return nil
}

func (m *V1alpha1ApplicationSource) validatePlugin(formats strfmt.Registry) error {
	if swag.IsZero(m.Plugin) { // not required
		return nil
	}

	if m.Plugin != nil {
		if err := m.Plugin.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("plugin")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("plugin")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this v1alpha1 application source based on the context it is used
func (m *V1alpha1ApplicationSource) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateDirectory(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateHelm(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateKustomize(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidatePlugin(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *V1alpha1ApplicationSource) contextValidateDirectory(ctx context.Context, formats strfmt.Registry) error {

	if m.Directory != nil {
		if err := m.Directory.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("directory")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("directory")
			}
			return err
		}
	}

	return nil
}

func (m *V1alpha1ApplicationSource) contextValidateHelm(ctx context.Context, formats strfmt.Registry) error {

	if m.Helm != nil {
		if err := m.Helm.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("helm")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("helm")
			}
			return err
		}
	}

	return nil
}

func (m *V1alpha1ApplicationSource) contextValidateKustomize(ctx context.Context, formats strfmt.Registry) error {

	if m.Kustomize != nil {
		if err := m.Kustomize.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("kustomize")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("kustomize")
			}
			return err
		}
	}

	return nil
}

func (m *V1alpha1ApplicationSource) contextValidatePlugin(ctx context.Context, formats strfmt.Registry) error {

	if m.Plugin != nil {
		if err := m.Plugin.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("plugin")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("plugin")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *V1alpha1ApplicationSource) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *V1alpha1ApplicationSource) UnmarshalBinary(b []byte) error {
	var res V1alpha1ApplicationSource
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
