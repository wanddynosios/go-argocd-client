// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// V1alpha1ApplicationSpec ApplicationSpec represents desired application state. Contains link to repository with application definition and additional parameters link definition revision.
//
// swagger:model v1alpha1ApplicationSpec
type V1alpha1ApplicationSpec struct {

	// destination
	Destination *V1alpha1ApplicationDestination `json:"destination,omitempty"`

	// IgnoreDifferences is a list of resources and their fields which should be ignored during comparison
	IgnoreDifferences []*V1alpha1ResourceIgnoreDifferences `json:"ignoreDifferences"`

	// Info contains a list of information (URLs, email addresses, and plain text) that relates to the application
	Info []*V1alpha1Info `json:"info"`

	// Project is a reference to the project this application belongs to.
	// The empty string means that application belongs to the 'default' project.
	Project string `json:"project,omitempty"`

	// RevisionHistoryLimit limits the number of items kept in the application's revision history, which is used for informational purposes as well as for rollbacks to previous versions.
	// This should only be changed in exceptional circumstances.
	// Setting to zero will store no history. This will reduce storage used.
	// Increasing will increase the space used to store the history, so we do not recommend increasing it.
	// Default is 10.
	RevisionHistoryLimit string `json:"revisionHistoryLimit,omitempty"`

	// source
	Source *V1alpha1ApplicationSource `json:"source,omitempty"`

	// sync policy
	SyncPolicy *V1alpha1SyncPolicy `json:"syncPolicy,omitempty"`
}

// Validate validates this v1alpha1 application spec
func (m *V1alpha1ApplicationSpec) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateDestination(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateIgnoreDifferences(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateInfo(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSource(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSyncPolicy(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *V1alpha1ApplicationSpec) validateDestination(formats strfmt.Registry) error {
	if swag.IsZero(m.Destination) { // not required
		return nil
	}

	if m.Destination != nil {
		if err := m.Destination.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("destination")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("destination")
			}
			return err
		}
	}

	return nil
}

func (m *V1alpha1ApplicationSpec) validateIgnoreDifferences(formats strfmt.Registry) error {
	if swag.IsZero(m.IgnoreDifferences) { // not required
		return nil
	}

	for i := 0; i < len(m.IgnoreDifferences); i++ {
		if swag.IsZero(m.IgnoreDifferences[i]) { // not required
			continue
		}

		if m.IgnoreDifferences[i] != nil {
			if err := m.IgnoreDifferences[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("ignoreDifferences" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("ignoreDifferences" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *V1alpha1ApplicationSpec) validateInfo(formats strfmt.Registry) error {
	if swag.IsZero(m.Info) { // not required
		return nil
	}

	for i := 0; i < len(m.Info); i++ {
		if swag.IsZero(m.Info[i]) { // not required
			continue
		}

		if m.Info[i] != nil {
			if err := m.Info[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("info" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("info" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *V1alpha1ApplicationSpec) validateSource(formats strfmt.Registry) error {
	if swag.IsZero(m.Source) { // not required
		return nil
	}

	if m.Source != nil {
		if err := m.Source.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("source")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("source")
			}
			return err
		}
	}

	return nil
}

func (m *V1alpha1ApplicationSpec) validateSyncPolicy(formats strfmt.Registry) error {
	if swag.IsZero(m.SyncPolicy) { // not required
		return nil
	}

	if m.SyncPolicy != nil {
		if err := m.SyncPolicy.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("syncPolicy")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("syncPolicy")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this v1alpha1 application spec based on the context it is used
func (m *V1alpha1ApplicationSpec) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateDestination(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateIgnoreDifferences(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateInfo(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateSource(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateSyncPolicy(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *V1alpha1ApplicationSpec) contextValidateDestination(ctx context.Context, formats strfmt.Registry) error {

	if m.Destination != nil {
		if err := m.Destination.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("destination")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("destination")
			}
			return err
		}
	}

	return nil
}

func (m *V1alpha1ApplicationSpec) contextValidateIgnoreDifferences(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.IgnoreDifferences); i++ {

		if m.IgnoreDifferences[i] != nil {
			if err := m.IgnoreDifferences[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("ignoreDifferences" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("ignoreDifferences" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *V1alpha1ApplicationSpec) contextValidateInfo(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Info); i++ {

		if m.Info[i] != nil {
			if err := m.Info[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("info" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("info" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *V1alpha1ApplicationSpec) contextValidateSource(ctx context.Context, formats strfmt.Registry) error {

	if m.Source != nil {
		if err := m.Source.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("source")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("source")
			}
			return err
		}
	}

	return nil
}

func (m *V1alpha1ApplicationSpec) contextValidateSyncPolicy(ctx context.Context, formats strfmt.Registry) error {

	if m.SyncPolicy != nil {
		if err := m.SyncPolicy.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("syncPolicy")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("syncPolicy")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *V1alpha1ApplicationSpec) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *V1alpha1ApplicationSpec) UnmarshalBinary(b []byte) error {
	var res V1alpha1ApplicationSpec
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
