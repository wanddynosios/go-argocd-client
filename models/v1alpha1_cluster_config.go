// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// V1alpha1ClusterConfig ClusterConfig is the configuration attributes. This structure is subset of the go-client
// rest.Config with annotations added for marshalling.
//
// swagger:model v1alpha1ClusterConfig
type V1alpha1ClusterConfig struct {

	// aws auth config
	AwsAuthConfig *V1alpha1AWSAuthConfig `json:"awsAuthConfig,omitempty"`

	// Server requires Bearer authentication. This client will not attempt to use
	// refresh tokens for an OAuth2 flow.
	// TODO: demonstrate an OAuth2 compatible client.
	BearerToken string `json:"bearerToken,omitempty"`

	// exec provider config
	ExecProviderConfig *V1alpha1ExecProviderConfig `json:"execProviderConfig,omitempty"`

	// password
	Password string `json:"password,omitempty"`

	// tls client config
	TLSClientConfig *V1alpha1TLSClientConfig `json:"tlsClientConfig,omitempty"`

	// Server requires Basic authentication
	Username string `json:"username,omitempty"`
}

// Validate validates this v1alpha1 cluster config
func (m *V1alpha1ClusterConfig) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAwsAuthConfig(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateExecProviderConfig(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTLSClientConfig(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *V1alpha1ClusterConfig) validateAwsAuthConfig(formats strfmt.Registry) error {
	if swag.IsZero(m.AwsAuthConfig) { // not required
		return nil
	}

	if m.AwsAuthConfig != nil {
		if err := m.AwsAuthConfig.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("awsAuthConfig")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("awsAuthConfig")
			}
			return err
		}
	}

	return nil
}

func (m *V1alpha1ClusterConfig) validateExecProviderConfig(formats strfmt.Registry) error {
	if swag.IsZero(m.ExecProviderConfig) { // not required
		return nil
	}

	if m.ExecProviderConfig != nil {
		if err := m.ExecProviderConfig.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("execProviderConfig")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("execProviderConfig")
			}
			return err
		}
	}

	return nil
}

func (m *V1alpha1ClusterConfig) validateTLSClientConfig(formats strfmt.Registry) error {
	if swag.IsZero(m.TLSClientConfig) { // not required
		return nil
	}

	if m.TLSClientConfig != nil {
		if err := m.TLSClientConfig.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("tlsClientConfig")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("tlsClientConfig")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this v1alpha1 cluster config based on the context it is used
func (m *V1alpha1ClusterConfig) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateAwsAuthConfig(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateExecProviderConfig(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateTLSClientConfig(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *V1alpha1ClusterConfig) contextValidateAwsAuthConfig(ctx context.Context, formats strfmt.Registry) error {

	if m.AwsAuthConfig != nil {
		if err := m.AwsAuthConfig.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("awsAuthConfig")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("awsAuthConfig")
			}
			return err
		}
	}

	return nil
}

func (m *V1alpha1ClusterConfig) contextValidateExecProviderConfig(ctx context.Context, formats strfmt.Registry) error {

	if m.ExecProviderConfig != nil {
		if err := m.ExecProviderConfig.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("execProviderConfig")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("execProviderConfig")
			}
			return err
		}
	}

	return nil
}

func (m *V1alpha1ClusterConfig) contextValidateTLSClientConfig(ctx context.Context, formats strfmt.Registry) error {

	if m.TLSClientConfig != nil {
		if err := m.TLSClientConfig.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("tlsClientConfig")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("tlsClientConfig")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *V1alpha1ClusterConfig) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *V1alpha1ClusterConfig) UnmarshalBinary(b []byte) error {
	var res V1alpha1ClusterConfig
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
