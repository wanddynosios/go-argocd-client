// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// V1alpha1ClusterInfo ClusterInfo contains information about the cluster
//
// swagger:model v1alpha1ClusterInfo
type V1alpha1ClusterInfo struct {

	// APIVersions contains list of API versions supported by the cluster
	APIVersions []string `json:"apiVersions"`

	// ApplicationsCount is the number of applications managed by Argo CD on the cluster
	ApplicationsCount string `json:"applicationsCount,omitempty"`

	// cache info
	CacheInfo *V1alpha1ClusterCacheInfo `json:"cacheInfo,omitempty"`

	// connection state
	ConnectionState *V1alpha1ConnectionState `json:"connectionState,omitempty"`

	// ServerVersion contains information about the Kubernetes version of the cluster
	ServerVersion string `json:"serverVersion,omitempty"`
}

// Validate validates this v1alpha1 cluster info
func (m *V1alpha1ClusterInfo) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCacheInfo(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateConnectionState(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *V1alpha1ClusterInfo) validateCacheInfo(formats strfmt.Registry) error {
	if swag.IsZero(m.CacheInfo) { // not required
		return nil
	}

	if m.CacheInfo != nil {
		if err := m.CacheInfo.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("cacheInfo")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("cacheInfo")
			}
			return err
		}
	}

	return nil
}

func (m *V1alpha1ClusterInfo) validateConnectionState(formats strfmt.Registry) error {
	if swag.IsZero(m.ConnectionState) { // not required
		return nil
	}

	if m.ConnectionState != nil {
		if err := m.ConnectionState.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("connectionState")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("connectionState")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this v1alpha1 cluster info based on the context it is used
func (m *V1alpha1ClusterInfo) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateCacheInfo(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateConnectionState(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *V1alpha1ClusterInfo) contextValidateCacheInfo(ctx context.Context, formats strfmt.Registry) error {

	if m.CacheInfo != nil {
		if err := m.CacheInfo.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("cacheInfo")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("cacheInfo")
			}
			return err
		}
	}

	return nil
}

func (m *V1alpha1ClusterInfo) contextValidateConnectionState(ctx context.Context, formats strfmt.Registry) error {

	if m.ConnectionState != nil {
		if err := m.ConnectionState.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("connectionState")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("connectionState")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *V1alpha1ClusterInfo) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *V1alpha1ClusterInfo) UnmarshalBinary(b []byte) error {
	var res V1alpha1ClusterInfo
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
