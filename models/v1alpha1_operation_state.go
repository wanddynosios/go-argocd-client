// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// V1alpha1OperationState OperationState contains information about state of a running operation
//
// swagger:model v1alpha1OperationState
type V1alpha1OperationState struct {

	// finished at
	FinishedAt *V1Time `json:"finishedAt,omitempty"`

	// Message holds any pertinent messages when attempting to perform operation (typically errors).
	Message string `json:"message,omitempty"`

	// operation
	Operation *V1alpha1Operation `json:"operation,omitempty"`

	// Phase is the current phase of the operation
	Phase string `json:"phase,omitempty"`

	// RetryCount contains time of operation retries
	RetryCount string `json:"retryCount,omitempty"`

	// started at
	StartedAt *V1Time `json:"startedAt,omitempty"`

	// sync result
	SyncResult *V1alpha1SyncOperationResult `json:"syncResult,omitempty"`
}

// Validate validates this v1alpha1 operation state
func (m *V1alpha1OperationState) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateFinishedAt(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOperation(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStartedAt(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSyncResult(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *V1alpha1OperationState) validateFinishedAt(formats strfmt.Registry) error {
	if swag.IsZero(m.FinishedAt) { // not required
		return nil
	}

	if m.FinishedAt != nil {
		if err := m.FinishedAt.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("finishedAt")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("finishedAt")
			}
			return err
		}
	}

	return nil
}

func (m *V1alpha1OperationState) validateOperation(formats strfmt.Registry) error {
	if swag.IsZero(m.Operation) { // not required
		return nil
	}

	if m.Operation != nil {
		if err := m.Operation.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("operation")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("operation")
			}
			return err
		}
	}

	return nil
}

func (m *V1alpha1OperationState) validateStartedAt(formats strfmt.Registry) error {
	if swag.IsZero(m.StartedAt) { // not required
		return nil
	}

	if m.StartedAt != nil {
		if err := m.StartedAt.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("startedAt")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("startedAt")
			}
			return err
		}
	}

	return nil
}

func (m *V1alpha1OperationState) validateSyncResult(formats strfmt.Registry) error {
	if swag.IsZero(m.SyncResult) { // not required
		return nil
	}

	if m.SyncResult != nil {
		if err := m.SyncResult.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("syncResult")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("syncResult")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this v1alpha1 operation state based on the context it is used
func (m *V1alpha1OperationState) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateFinishedAt(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateOperation(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateStartedAt(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateSyncResult(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *V1alpha1OperationState) contextValidateFinishedAt(ctx context.Context, formats strfmt.Registry) error {

	if m.FinishedAt != nil {
		if err := m.FinishedAt.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("finishedAt")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("finishedAt")
			}
			return err
		}
	}

	return nil
}

func (m *V1alpha1OperationState) contextValidateOperation(ctx context.Context, formats strfmt.Registry) error {

	if m.Operation != nil {
		if err := m.Operation.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("operation")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("operation")
			}
			return err
		}
	}

	return nil
}

func (m *V1alpha1OperationState) contextValidateStartedAt(ctx context.Context, formats strfmt.Registry) error {

	if m.StartedAt != nil {
		if err := m.StartedAt.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("startedAt")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("startedAt")
			}
			return err
		}
	}

	return nil
}

func (m *V1alpha1OperationState) contextValidateSyncResult(ctx context.Context, formats strfmt.Registry) error {

	if m.SyncResult != nil {
		if err := m.SyncResult.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("syncResult")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("syncResult")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *V1alpha1OperationState) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *V1alpha1OperationState) UnmarshalBinary(b []byte) error {
	var res V1alpha1OperationState
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
