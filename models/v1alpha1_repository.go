// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// V1alpha1Repository Repository is a repository holding application configurations
//
// swagger:model v1alpha1Repository
type V1alpha1Repository struct {

	// connection state
	ConnectionState *V1alpha1ConnectionState `json:"connectionState,omitempty"`

	// EnableLFS specifies whether git-lfs support should be enabled for this repo. Only valid for Git repositories.
	EnableLfs bool `json:"enableLfs,omitempty"`

	// EnableOCI specifies whether helm-oci support should be enabled for this repo
	EnableOCI bool `json:"enableOCI,omitempty"`

	// GithubAppEnterpriseBaseURL specifies the base URL of GitHub Enterprise installation. If empty will default to https://api.github.com
	GithubAppEnterpriseBaseURL string `json:"githubAppEnterpriseBaseUrl,omitempty"`

	// GithubAppId specifies the ID of the GitHub app used to access the repo
	GithubAppID string `json:"githubAppID,omitempty"`

	// GithubAppInstallationId specifies the installation ID of the GitHub App used to access the repo
	GithubAppInstallationID string `json:"githubAppInstallationID,omitempty"`

	// Github App Private Key PEM data
	GithubAppPrivateKey string `json:"githubAppPrivateKey,omitempty"`

	// Whether credentials were inherited from a credential set
	InheritedCreds bool `json:"inheritedCreds,omitempty"`

	// Insecure specifies whether the connection to the repository ignores any errors when verifying TLS certificates or SSH host keys
	Insecure bool `json:"insecure,omitempty"`

	// InsecureIgnoreHostKey should not be used anymore, Insecure is favoured
	// Used only for Git repos
	InsecureIgnoreHostKey bool `json:"insecureIgnoreHostKey,omitempty"`

	// Name specifies a name to be used for this repo. Only used with Helm repos
	Name string `json:"name,omitempty"`

	// Password contains the password or PAT used for authenticating at the remote repository
	Password string `json:"password,omitempty"`

	// Reference between project and repository that allow you automatically to be added as item inside SourceRepos project entity
	Project string `json:"project,omitempty"`

	// Proxy specifies the HTTP/HTTPS proxy used to access the repo
	Proxy string `json:"proxy,omitempty"`

	// Repo contains the URL to the remote repository
	Repo string `json:"repo,omitempty"`

	// SSHPrivateKey contains the PEM data for authenticating at the repo server. Only used with Git repos.
	SSHPrivateKey string `json:"sshPrivateKey,omitempty"`

	// TLSClientCertData contains a certificate in PEM format for authenticating at the repo server
	TLSClientCertData string `json:"tlsClientCertData,omitempty"`

	// TLSClientCertKey contains a private key in PEM format for authenticating at the repo server
	TLSClientCertKey string `json:"tlsClientCertKey,omitempty"`

	// Type specifies the type of the repo. Can be either "git" or "helm. "git" is assumed if empty or absent.
	Type string `json:"type,omitempty"`

	// Username contains the user name used for authenticating at the remote repository
	Username string `json:"username,omitempty"`
}

// Validate validates this v1alpha1 repository
func (m *V1alpha1Repository) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateConnectionState(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *V1alpha1Repository) validateConnectionState(formats strfmt.Registry) error {
	if swag.IsZero(m.ConnectionState) { // not required
		return nil
	}

	if m.ConnectionState != nil {
		if err := m.ConnectionState.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("connectionState")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("connectionState")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this v1alpha1 repository based on the context it is used
func (m *V1alpha1Repository) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateConnectionState(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *V1alpha1Repository) contextValidateConnectionState(ctx context.Context, formats strfmt.Registry) error {

	if m.ConnectionState != nil {
		if err := m.ConnectionState.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("connectionState")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("connectionState")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *V1alpha1Repository) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *V1alpha1Repository) UnmarshalBinary(b []byte) error {
	var res V1alpha1Repository
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
