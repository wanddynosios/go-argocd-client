// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// V1alpha1RepositoryCertificate A RepositoryCertificate is either SSH known hosts entry or TLS certificate
//
// swagger:model v1alpha1RepositoryCertificate
type V1alpha1RepositoryCertificate struct {

	// CertData contains the actual certificate data, dependent on the certificate type
	// Format: byte
	CertData strfmt.Base64 `json:"certData,omitempty"`

	// CertInfo will hold additional certificate info, depdendent on the certificate type (e.g. SSH fingerprint, X509 CommonName)
	CertInfo string `json:"certInfo,omitempty"`

	// CertSubType specifies the sub type of the cert, i.e. "ssh-rsa"
	CertSubType string `json:"certSubType,omitempty"`

	// CertType specifies the type of the certificate - currently one of "https" or "ssh"
	CertType string `json:"certType,omitempty"`

	// ServerName specifies the DNS name of the server this certificate is intended for
	ServerName string `json:"serverName,omitempty"`
}

// Validate validates this v1alpha1 repository certificate
func (m *V1alpha1RepositoryCertificate) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this v1alpha1 repository certificate based on context it is used
func (m *V1alpha1RepositoryCertificate) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *V1alpha1RepositoryCertificate) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *V1alpha1RepositoryCertificate) UnmarshalBinary(b []byte) error {
	var res V1alpha1RepositoryCertificate
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
