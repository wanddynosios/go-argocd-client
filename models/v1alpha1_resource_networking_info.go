// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// V1alpha1ResourceNetworkingInfo ResourceNetworkingInfo holds networking resource related information
// TODO: describe members of this type
//
// swagger:model v1alpha1ResourceNetworkingInfo
type V1alpha1ResourceNetworkingInfo struct {

	// ExternalURLs holds list of URLs which should be available externally. List is populated for ingress resources using rules hostnames.
	ExternalURLs []string `json:"externalURLs"`

	// ingress
	Ingress []*V1LoadBalancerIngress `json:"ingress"`

	// labels
	Labels map[string]string `json:"labels,omitempty"`

	// target labels
	TargetLabels map[string]string `json:"targetLabels,omitempty"`

	// target refs
	TargetRefs []*V1alpha1ResourceRef `json:"targetRefs"`
}

// Validate validates this v1alpha1 resource networking info
func (m *V1alpha1ResourceNetworkingInfo) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateIngress(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTargetRefs(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *V1alpha1ResourceNetworkingInfo) validateIngress(formats strfmt.Registry) error {
	if swag.IsZero(m.Ingress) { // not required
		return nil
	}

	for i := 0; i < len(m.Ingress); i++ {
		if swag.IsZero(m.Ingress[i]) { // not required
			continue
		}

		if m.Ingress[i] != nil {
			if err := m.Ingress[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("ingress" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("ingress" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *V1alpha1ResourceNetworkingInfo) validateTargetRefs(formats strfmt.Registry) error {
	if swag.IsZero(m.TargetRefs) { // not required
		return nil
	}

	for i := 0; i < len(m.TargetRefs); i++ {
		if swag.IsZero(m.TargetRefs[i]) { // not required
			continue
		}

		if m.TargetRefs[i] != nil {
			if err := m.TargetRefs[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("targetRefs" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("targetRefs" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this v1alpha1 resource networking info based on the context it is used
func (m *V1alpha1ResourceNetworkingInfo) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateIngress(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateTargetRefs(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *V1alpha1ResourceNetworkingInfo) contextValidateIngress(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Ingress); i++ {

		if m.Ingress[i] != nil {
			if err := m.Ingress[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("ingress" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("ingress" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *V1alpha1ResourceNetworkingInfo) contextValidateTargetRefs(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.TargetRefs); i++ {

		if m.TargetRefs[i] != nil {
			if err := m.TargetRefs[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("targetRefs" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("targetRefs" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *V1alpha1ResourceNetworkingInfo) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *V1alpha1ResourceNetworkingInfo) UnmarshalBinary(b []byte) error {
	var res V1alpha1ResourceNetworkingInfo
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
