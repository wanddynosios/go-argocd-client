// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// V1alpha1ResourceOverride ResourceOverride holds configuration to customize resource diffing and health assessment
// TODO: describe the members of this type
//
// swagger:model v1alpha1ResourceOverride
type V1alpha1ResourceOverride struct {

	// actions
	Actions string `json:"actions,omitempty"`

	// health lua
	HealthLua string `json:"healthLua,omitempty"`

	// ignore differences
	IgnoreDifferences *V1alpha1OverrideIgnoreDiff `json:"ignoreDifferences,omitempty"`

	// known type fields
	KnownTypeFields []*V1alpha1KnownTypeField `json:"knownTypeFields"`

	// use open libs
	UseOpenLibs bool `json:"useOpenLibs,omitempty"`
}

// Validate validates this v1alpha1 resource override
func (m *V1alpha1ResourceOverride) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateIgnoreDifferences(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateKnownTypeFields(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *V1alpha1ResourceOverride) validateIgnoreDifferences(formats strfmt.Registry) error {
	if swag.IsZero(m.IgnoreDifferences) { // not required
		return nil
	}

	if m.IgnoreDifferences != nil {
		if err := m.IgnoreDifferences.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("ignoreDifferences")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("ignoreDifferences")
			}
			return err
		}
	}

	return nil
}

func (m *V1alpha1ResourceOverride) validateKnownTypeFields(formats strfmt.Registry) error {
	if swag.IsZero(m.KnownTypeFields) { // not required
		return nil
	}

	for i := 0; i < len(m.KnownTypeFields); i++ {
		if swag.IsZero(m.KnownTypeFields[i]) { // not required
			continue
		}

		if m.KnownTypeFields[i] != nil {
			if err := m.KnownTypeFields[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("knownTypeFields" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("knownTypeFields" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this v1alpha1 resource override based on the context it is used
func (m *V1alpha1ResourceOverride) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateIgnoreDifferences(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateKnownTypeFields(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *V1alpha1ResourceOverride) contextValidateIgnoreDifferences(ctx context.Context, formats strfmt.Registry) error {

	if m.IgnoreDifferences != nil {
		if err := m.IgnoreDifferences.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("ignoreDifferences")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("ignoreDifferences")
			}
			return err
		}
	}

	return nil
}

func (m *V1alpha1ResourceOverride) contextValidateKnownTypeFields(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.KnownTypeFields); i++ {

		if m.KnownTypeFields[i] != nil {
			if err := m.KnownTypeFields[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("knownTypeFields" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("knownTypeFields" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *V1alpha1ResourceOverride) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *V1alpha1ResourceOverride) UnmarshalBinary(b []byte) error {
	var res V1alpha1ResourceOverride
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
