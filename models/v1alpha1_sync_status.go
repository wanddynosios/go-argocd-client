// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// V1alpha1SyncStatus SyncStatus contains information about the currently observed live and desired states of an application
//
// swagger:model v1alpha1SyncStatus
type V1alpha1SyncStatus struct {

	// compared to
	ComparedTo *V1alpha1ComparedTo `json:"comparedTo,omitempty"`

	// Revision contains information about the revision the comparison has been performed to
	Revision string `json:"revision,omitempty"`

	// Status is the sync state of the comparison
	Status string `json:"status,omitempty"`
}

// Validate validates this v1alpha1 sync status
func (m *V1alpha1SyncStatus) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateComparedTo(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *V1alpha1SyncStatus) validateComparedTo(formats strfmt.Registry) error {
	if swag.IsZero(m.ComparedTo) { // not required
		return nil
	}

	if m.ComparedTo != nil {
		if err := m.ComparedTo.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("comparedTo")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("comparedTo")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this v1alpha1 sync status based on the context it is used
func (m *V1alpha1SyncStatus) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateComparedTo(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *V1alpha1SyncStatus) contextValidateComparedTo(ctx context.Context, formats strfmt.Registry) error {

	if m.ComparedTo != nil {
		if err := m.ComparedTo.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("comparedTo")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("comparedTo")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *V1alpha1SyncStatus) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *V1alpha1SyncStatus) UnmarshalBinary(b []byte) error {
	var res V1alpha1SyncStatus
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
