// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// V1alpha1SyncWindow SyncWindow contains the kind, time, duration and attributes that are used to assign the syncWindows to apps
//
// swagger:model v1alpha1SyncWindow
type V1alpha1SyncWindow struct {

	// Applications contains a list of applications that the window will apply to
	Applications []string `json:"applications"`

	// Clusters contains a list of clusters that the window will apply to
	Clusters []string `json:"clusters"`

	// Duration is the amount of time the sync window will be open
	Duration string `json:"duration,omitempty"`

	// Kind defines if the window allows or blocks syncs
	Kind string `json:"kind,omitempty"`

	// ManualSync enables manual syncs when they would otherwise be blocked
	ManualSync bool `json:"manualSync,omitempty"`

	// Namespaces contains a list of namespaces that the window will apply to
	Namespaces []string `json:"namespaces"`

	// Schedule is the time the window will begin, specified in cron format
	Schedule string `json:"schedule,omitempty"`

	// TimeZone of the sync that will be applied to the schedule
	TimeZone string `json:"timeZone,omitempty"`
}

// Validate validates this v1alpha1 sync window
func (m *V1alpha1SyncWindow) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this v1alpha1 sync window based on context it is used
func (m *V1alpha1SyncWindow) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *V1alpha1SyncWindow) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *V1alpha1SyncWindow) UnmarshalBinary(b []byte) error {
	var res V1alpha1SyncWindow
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
